"0","# Function to convert columns to the required format, clean the data, and make it reusable for different cancer types"
"0","convert_and_clean_pedigree_format <- function(dat, cancer_type, age_dx_col) {"
"0","  # Loop through each pedigree in the list"
"0","  for (i in seq_along(dat)) {"
"0","    "
"0","    # STEP 1: Standardize Column Names"
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Pedigree.name""] <- ""PedigreeID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""UPN""] <- ""ID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Gender""] <- ""Sex"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Mother.ID""] <- ""MotherID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Father.ID""] <- ""FatherID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""proband_flag_x""] <- ""isProband"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Age""] <- ""CurAge"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == cancer_type] <- ""isAff"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == age_dx_col] <- ""Age"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""GT.Pos""] <- ""geno"""
"0","    "
"0","    # STEP 2: Calculate Current Age (CurAge)"
"0","    # Calculate CurAge based on Year_Birth, YEAR_Death, and Year_Last_FolUp"
"0","    dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$Year_Birth),"
"0","                              ifelse(!is.na(dat[[i]]$YEAR_Death) | !is.na(dat[[i]]$Year_Last_FolUp),"
"0","                                     # Take the minimum of Year_Last_FolUp and YEAR_Death if both are available"
"0","                                     pmin(dat[[i]]$YEAR_Death, dat[[i]]$Year_Last_FolUp, na.rm = TRUE) - dat[[i]]$Year_Birth,"
"0","                                     dat[[i]]$CurAge),  # Leave CurAge as is if no information is available"
"0","                              dat[[i]]$CurAge)"
"0","    "
"0","    # Handle negative ages by setting them to NA"
"0","    dat[[i]]$CurAge <- ifelse(dat[[i]]$CurAge < 0, NA, dat[[i]]$CurAge)"
"0","    "
"0","    # STEP 3: Update isAff Based on Age of Diagnosis"
"0","    # If age of diagnosis (Age) exists but isAff is 0 or NA, set isAff to 1"
"0","    dat[[i]]$isAff <- ifelse(!is.na(dat[[i]]$Age) & (is.na(dat[[i]]$isAff) | dat[[i]]$isAff == 0), 1, dat[[i]]$isAff)"
"0","    "
"0","    # Remove individuals where Age of diagnosis does not exist and isAff is NA"
"0","    dat[[i]] <- dat[[i]][!(is.na(dat[[i]]$Age) & is.na(dat[[i]]$isAff)), ]"
"0","    "
"0","    # Convert ""isAff"" to numeric where ""True"" is 1, all other values (including NA) are 0"
"0","    dat[[i]]$isAff[is.na(dat[[i]]$isAff)] <- 0"
"0","    dat[[i]]$isAff <- ifelse(dat[[i]]$isAff == ""True"", 1, 0)"
"0","    "
"0","    # STEP 4: Convert Sex to Numeric"
"0","    # Convert ""Sex"" to numeric where ""M"" is 1 and ""F"" is 0, set others to NA"
"0","    dat[[i]]$Sex <- ifelse(dat[[i]]$Sex == ""M"", 1, ifelse(dat[[i]]$Sex == ""F"", 0, NA))"
"0","    "
"0","    # Remove rows where Sex is NA"
"0","    dat[[i]] <- dat[[i]][!is.na(dat[[i]]$Sex), ]"
"0","    "
"0","    # STEP 5: Convert isProband to Numeric"
"0","    # Convert ""isProband"" to numeric where ""proband"" is 1, all other values are 0"
"0","    dat[[i]]$isProband <- ifelse(dat[[i]]$isProband == ""proband"", 1, 0)"
"0","    "
"0","    # STEP 6: Adjust Geno Column"
"0","    # Adjust ""geno"" column: ""True"" = 1, ""False"" = 0, NA if unknown"
"0","    dat[[i]]$geno <- ifelse(dat[[i]]$geno == ""True"", 1,"
"0","                            ifelse(dat[[i]]$geno == ""False"", 0, NA))"
"0","    "
"0","    # STEP 7: Ensure CurAge and Age are within Allowed Range (1 to 94)"
"0","    # Cap values outside the range [1, 94]"
"0","    dat[[i]]$CurAge <- ifelse(dat[[i]]$CurAge > 94, 94, dat[[i]]$CurAge)"
"0","    dat[[i]]$CurAge <- ifelse(dat[[i]]$CurAge < 1, 1, dat[[i]]$CurAge)"
"0","    dat[[i]]$Age <- ifelse(dat[[i]]$Age > 94, 94, dat[[i]]$Age)"
"0","    dat[[i]]$Age <- ifelse(dat[[i]]$Age < 1, 1, dat[[i]]$Age)"
"0","    "
"0","    # STEP 8: Ensure FatherID and MotherID are Valid IDs"
"0","    # Only keep valid IDs for FatherID and MotherID"
"0","    valid_ids <- dat[[i]]$ID"
"0","    dat[[i]]$FatherID <- ifelse(dat[[i]]$FatherID %in% valid_ids, dat[[i]]$FatherID, NA)"
"0","    dat[[i]]$MotherID <- ifelse(dat[[i]]$MotherID %in% valid_ids, dat[[i]]$MotherID, NA)"
"0","    "
"0","    # STEP 9: Warning for Invalid Parent IDs"
"0","    # Check for any remaining invalid FatherID or MotherID and warn"
"0","    if (any(is.na(dat[[i]]$FatherID) | is.na(dat[[i]]$MotherID))) {"
"0","      warning(""Some individuals have invalid or missing FatherID or MotherID."")"
"0","    }"
"0","  }"
"0","  "
"0","  # Return the modified data list"
"0","  return(dat)"
"0","}"
"0",""
