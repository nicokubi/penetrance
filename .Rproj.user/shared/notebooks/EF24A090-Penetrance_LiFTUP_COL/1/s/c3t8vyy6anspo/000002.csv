"0","# Function to convert columns to the required format"
"0","convert_pedigree_format <- function(dat) {"
"0","  # Loop through each pedigree in the list"
"0","  for (i in seq_along(dat)) {"
"0","    "
"0","    # Standardize column names"
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Pedigree.name""] <- ""PedigreeID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""UPN""] <- ""ID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Gender""] <- ""Sex"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Mother.ID""] <- ""MotherID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Father.ID""] <- ""FatherID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""proband_flag_x""] <- ""isProband"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Age""] <- ""CurAge"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Colorectal""] <- ""isAff"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Colorectal_age_dx""] <- ""Age"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""GT.Pos""] <- ""geno"""
"0","    "
"0","    # Calculate CurAge based on available Year_Birth and death/follow-up information"
"0","    dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$Year_Birth),"
"0","                              ifelse(!is.na(dat[[i]]$YEAR_Death) | !is.na(dat[[i]]$Year_Last_FolUp),"
"0","                                     # Take the minimum of Year_Last_FolUp and YEAR_Death if both are available"
"0","                                     pmin(dat[[i]]$YEAR_Death, dat[[i]]$Year_Last_FolUp, na.rm = TRUE) - dat[[i]]$Year_Birth,"
"0","                                     dat[[i]]$CurAge),  # Leave CurAge as is if no information is available"
"0","                              dat[[i]]$CurAge)"
"0","    "
"0","    # Handle negative ages"
"0","    dat[[i]]$CurAge <- ifelse(dat[[i]]$CurAge < 0, NA, dat[[i]]$CurAge)"
"0","  }"
"0","  "
"0","  # Return the modified data list"
"0","  return(dat)"
"0","}"
"0",""
"0","# Example usage with your list of pedigrees"
"0","dat_adjusted <- convert_pedigree_format(dat)"
"0",""
"0","# Initialize counters for total removals"
"0","total_removed_due_to_sex <- 0"
"0","total_removed_due_to_aff_age <- 0"
"0",""
"0","# Iterate through each data frame in the list dat"
"0","for (i in seq_along(dat_adjusted)) {"
"0","  "
"0","  # Count initial number of rows"
"0","  initial_rows <- nrow(dat_adjusted[[i]])"
"0","  "
"0","  # Convert ""Sex"" to numeric where ""M"" is 1 and ""F"" is 0"
"0","  dat_adjusted[[i]]$Sex <- ifelse(dat_adjusted[[i]]$Sex == ""M"", 1, ifelse(dat_adjusted[[i]]$Sex == ""F"", 0, NA))"
"0","  "
"0","  # Remove rows where Sex is NA"
"0","  dat_adjusted[[i]] <- dat_adjusted[[i]][!is.na(dat_adjusted[[i]]$Sex), ]"
"0","  "
"0","  # Update counter for removal due to missing Sex"
"0","  total_removed_due_to_sex <- total_removed_due_to_sex + (initial_rows - nrow(dat_adjusted[[i]]))"
"0","  "
"0","  # Convert ""isProband"" to numeric where ""proband"" is 1, and all other values are 0"
"0","  dat_adjusted[[i]]$isProband <- ifelse(dat_adjusted[[i]]$isProband == ""proband"", 1, 0)"
"0","  "
"0","  # Convert ""isAff"" to numeric where ""True"" is 1, and anything else (including NA) is 0"
"0","  dat_adjusted[[i]]$isAff[is.na(dat_adjusted[[i]]$isAff)] <- 0"
"0","  dat_adjusted[[i]]$isAff <- ifelse(dat_adjusted[[i]]$isAff == ""True"", 1, 0)"
"0","  "
"0","  # Adjust ""geno"" column: ""True"" = 1, ""False"" = 0, NA if unknown"
"0","  dat_adjusted[[i]]$geno <- ifelse(dat_adjusted[[i]]$geno == ""True"", 1,"
"0","                                   ifelse(dat_adjusted[[i]]$geno == ""False"", 0, NA))"
"0",""
"0","  # Ensure ""CurAge"" and ""Age"" are within allowed range (1 to 94)"
"0","  dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge > 94, 94, dat_adjusted[[i]]$CurAge)"
"0","  dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge < 1, 1, dat_adjusted[[i]]$CurAge)"
"0","  dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age > 94, 94, dat_adjusted[[i]]$Age)"
"0","  dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age < 1, 1, dat_adjusted[[i]]$Age)"
"0","  "
"0","  # Set ""isAff"" to 1 if ""Age"" is non-zero or not NA and within the valid range (1 to 94)"
"0","  dat_adjusted[[i]]$isAff <- ifelse(!is.na(dat_adjusted[[i]]$Age) & dat_adjusted[[i]]$Age > 0, 1, dat_adjusted[[i]]$isAff)"
"0","  "
"0","  # Ensure FatherID and MotherID are valid IDs"
"0","  valid_ids <- dat_adjusted[[i]]$ID"
"0","  "
"0","  dat_adjusted[[i]]$FatherID <- ifelse(dat_adjusted[[i]]$FatherID %in% valid_ids, dat_adjusted[[i]]$FatherID, NA)"
"0","  dat_adjusted[[i]]$MotherID <- ifelse(dat_adjusted[[i]]$MotherID %in% valid_ids, dat_adjusted[[i]]$MotherID, NA)"
"0","  "
"0","  # Count initial number of rows before removing individuals with ""isAff = 1"" but no valid Age"
"0","  initial_rows <- nrow(dat_adjusted[[i]])"
"0","  "
"0","  # Remove individuals where ""isAff"" is 1 but ""Age"" is NA or not in the valid range"
"0","  dat_adjusted[[i]] <- dat_adjusted[[i]][!(dat_adjusted[[i]]$isAff == 1 & (is.na(dat_adjusted[[i]]$Age) | dat_adjusted[[i]]$Age < 1 | dat_adjusted[[i]]$Age > 94)), ]"
"0","  "
"0","  # Update counter for removal due to ""isAff = 1"" but no valid Age"
"0","  total_removed_due_to_aff_age <- total_removed_due_to_aff_age + (initial_rows - nrow(dat_adjusted[[i]]))"
"0","}"
"0",""
"0","# Print the total removals"
"0","cat(sprintf(""Total individuals removed due to missing Sex: %d\n"", total_removed_due_to_sex))"
"1","Total individuals removed due to missing Sex: 1853
"
"0","cat(sprintf(""Total individuals removed due to 'isAff = 1' but no valid Age: %d\n"", total_removed_due_to_aff_age))"
"1","Total individuals removed due to 'isAff = 1' but no valid Age: 63
"
