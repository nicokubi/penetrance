"0","process_pedigree_data <- function(dat) {"
"0","    ###########################################"
"0","    # USER CONFIGURATION - MODIFY AS NEEDED"
"0","    ###########################################"
"0","    "
"0","    # Age boundaries"
"0","    AGE_MIN <- 1    # Minimum valid age"
"0","    AGE_MAX <- 90   # Maximum valid age"
"0","    "
"0","    # Column name mapping - modify if your input data has different column names"
"0","    col_mapping <- c("
"0","        ""familyid"" = ""PedigreeID"","
"0","        ""globalid"" = ""ID"","
"0","        ""NewSex"" = ""Sex"","
"0","        ""NewMotherGlobalID"" = ""MotherID"","
"0","        ""NewFatherGlobalID"" = ""FatherID"","
"0","        ""probandflag"" = ""isProband"","
"0","        ""Colorectal"" = ""isAff"",           "
"0","        ""Colorectal_ImputedAgeDx"" = ""Age"",    # using imputed CRC age     "
"0","        ""GT.Pos"" = ""geno"""
"0","    )"
"0","    "
"0","    ###########################################"
"0","    # HELPER FUNCTIONS - DO NOT MODIFY"
"0","    ###########################################"
"0","    "
"0","    constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {"
"0","        if (is.numeric(age)) {"
"0","            return(ifelse(age > max_age, max_age,"
"0","                   ifelse(age < min_age, min_age, age)))"
"0","        }"
"0","        return(NA)"
"0","    }"
"0","    "
"0","    stats <- list("
"0","        removed_sex = 0,"
"0","        invalid_age = 0,"
"0","        na_cur_age = 0,"
"0","        invalid_geno = 0"
"0","    )"
"0","    "
"0","    ###########################################"
"0","    # MAIN PROCESSING LOGIC"
"0","    ###########################################"
"0","    "
"0","    dat_processed <- lapply(dat, function(df) {"
"0","        # Rename columns"
"0","        for (old_name in names(col_mapping)) {"
"0","            if (old_name %in% colnames(df)) {"
"0","                colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]"
"0","            }"
"0","        }"
"0","        "
"0","        # Process Sex more robustly"
"0","        df$Sex <- toupper(substr(as.character(df$Sex), 1, 1))  # Convert to first letter, uppercase"
"0","        df$Sex <- ifelse(df$Sex == ""M"", 1, "
"0","                        ifelse(df$Sex == ""F"", 0, NA))"
"0","        "
"0","        # Process binary columns more robustly"
"0","        df$isProband <- ifelse(df$isProband == ""proband"", 1, 0)"
"0","        df$isAff <- ifelse(is.na(df$isAff), 0,"
"0","                          ifelse(df$isAff == ""True"", 1, 0))"
"0","        "
"0","        # Process genotype more robustly"
"0","        df$geno <- ifelse(df$geno == ""True"", 1,"
"0","                         ifelse(df$geno == ""False"", 0, NA))"
"0","        stats$invalid_geno <<- stats$invalid_geno + sum(is.na(df$geno))"
"0","        "
"0","        # Handle age processing"
"0","        df$CurAge <- ifelse(!is.na(df$WorkingMortYear), "
"0","                           df$WorkingMortYear - df$WorkingBirthYear,"
"0","                           df$WorkingCensorAge)"
"0","        "
"0","        # Convert age columns to numeric and constrain"
"0","        df$CurAge <- as.numeric(df$CurAge)"
"0","        df$Age <- as.numeric(df$Age)"
"0","        df$CurAge <- constrain_age(df$CurAge)"
"0","        df$Age <- constrain_age(df$Age)"
"0","        "
"0","        # Update isAff based on Age"
"0","        df$isAff <- ifelse(!is.na(df$Age) & df$Age > 0, 1, df$isAff)"
"0","        "
"0","        # Validate parent IDs more strictly"
"0","        valid_ids <- unique(df$ID)"
"0","        df$FatherID <- ifelse(df$FatherID %in% valid_ids, df$FatherID, NA)"
"0","        df$MotherID <- ifelse(df$MotherID %in% valid_ids, df$MotherID, NA)"
"0","        "
"0","        # Additional validation: ensure fathers are male and mothers are female"
"0","        father_rows <- df$ID %in% df$FatherID"
"0","        mother_rows <- df$ID %in% df$MotherID"
"0","        if (any(father_rows)) {"
"0","            df$Sex[father_rows] <- 1  # Set fathers to male"
"0","        }"
"0","        if (any(mother_rows)) {"
"0","            df$Sex[mother_rows] <- 0  # Set mothers to female"
"0","        }"
"0","        "
"0","        # Update statistics"
"0","        stats$invalid_age <<- stats$invalid_age + sum(is.na(df$Age) & df$isAff == 1)"
"0","        stats$na_cur_age <<- stats$na_cur_age + sum(is.na(df$CurAge))"
"0","        "
"0","        return(df)"
"0","    })"
"0","    "
"0","    # Add more detailed statistics"
"0","    stats$total_individuals <- sum(sapply(dat_processed, nrow))"
"0","    stats$total_families <- length(dat_processed)"
"0","    stats$families_with_duplicates <- sum(sapply(dat_processed, function(df) {"
"0","        any(duplicated(df$ID))"
"0","    }))"
"0","    "
"0","    list("
"0","        processed_data = dat_processed,"
"0","        statistics = stats"
"0","    )"
"0","}"
"0",""
"0","# Usage"
"0","result <- process_pedigree_data(dat)"
"0","dat_adjusted <- result$processed_data"
"0","# Save the processed data"
"0","save(dat_adjusted, file=""/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/ICE/processed_pedigree_data_COL_030425.RData"")"
"0",""
"0","# Print statistics"
"0","cat(sprintf(""Total individuals removed due to missing Sex: %d\n"", result$statistics$removed_sex))"
"1","Total individuals removed due to missing Sex: 0
"
"0","cat(sprintf(""Total NA values in CurAge: %d\n"", result$statistics$na_cur_age))"
"1","Total NA values in CurAge: 37521
"
"0","cat(sprintf(""Families with duplicate IDs: %d\n"", result$statistics$families_with_duplicates))"
"1","Families with duplicate IDs: 0
"
