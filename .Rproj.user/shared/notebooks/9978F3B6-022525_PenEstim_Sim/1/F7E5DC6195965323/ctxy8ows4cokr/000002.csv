"0","# Uncertainty Quantification for Both Male and Female Penetrance"
"0","# Enhanced functions for comparing estimated vs true penetrance"
"0",""
"0","# Function to calculate quantitative comparison metrics"
"0","calculate_penetrance_metrics <- function(true_penetrance, estimated_penetrance, sex = ""female"") {"
"0","  # Ensure both penetrance curves have the same age range"
"0","  max_age <- min(length(true_penetrance), length(estimated_penetrance))"
"0","  true_pen <- true_penetrance[1:max_age]"
"0","  est_pen <- estimated_penetrance[1:max_age]"
"0","  "
"0","  # Calculate metrics"
"0","  mae <- mean(abs(true_pen - est_pen), na.rm = TRUE)  # Mean Absolute Error"
"0","  rmse <- sqrt(mean((true_pen - est_pen)^2, na.rm = TRUE))  # Root Mean Squared Error"
"0","  "
"0","  # Calculate age-specific metrics at key ages"
"0","  key_ages <- c(40, 50, 60, 70, 80)"
"0","  key_age_metrics <- data.frame("
"0","    Age = key_ages,"
"0","    True = NA,"
"0","    Estimated = NA,"
"0","    AbsError = NA,"
"0","    RelError = NA"
"0","  )"
"0","  "
"0","  for (i in seq_along(key_ages)) {"
"0","    age <- key_ages[i]"
"0","    if (age <= max_age) {"
"0","      key_age_metrics$True[i] <- true_pen[age]"
"0","      key_age_metrics$Estimated[i] <- est_pen[age]"
"0","      key_age_metrics$AbsError[i] <- abs(true_pen[age] - est_pen[age])"
"0","      key_age_metrics$RelError[i] <- ifelse(true_pen[age] > 0,"
"0","                                          abs(true_pen[age] - est_pen[age]) / true_pen[age],"
"0","                                          NA)"
"0","    }"
"0","  }"
"0","  "
"0","  # Calculate Area Under the Curve (AUC) difference"
"0","  true_auc <- sum(true_pen, na.rm = TRUE)"
"0","  est_auc <- sum(est_pen, na.rm = TRUE)"
"0","  auc_diff <- abs(true_auc - est_auc)"
"0","  auc_rel_diff <- auc_diff / true_auc"
"0","  "
"0","  # Return all metrics"
"0","  return(list("
"0","    sex = sex,"
"0","    mae = mae,"
"0","    rmse = rmse,"
"0","    key_age_metrics = key_age_metrics,"
"0","    auc_true = true_auc,"
"0","    auc_estimated = est_auc,"
"0","    auc_abs_diff = auc_diff,"
"0","    auc_rel_diff = auc_rel_diff"
"0","  ))"
"0","}"
"0",""
"0","# Function to evaluate all simulation results"
"0","evaluate_all_results <- function(results_list, true_female_cumulative, true_male_cumulative) {"
"0","  # Initialize results table"
"0","  evaluation_results <- data.frame("
"0","    SampleSize = numeric(),"
"0","    Sex = character(),"
"0","    MAE = numeric(),"
"0","    RMSE = numeric(),"
"0","    AUC_True = numeric(),"
"0","    AUC_Estimated = numeric(), "
"0","    AUC_RelDiff = numeric(),"
"0","    Age50_True = numeric(),"
"0","    Age50_Est = numeric(),"
"0","    Age50_Error = numeric(),"
"0","    Age70_True = numeric(),"
"0","    Age70_Est = numeric(),"
"0","    Age70_Error = numeric()"
"0","  )"
"0","  "
"0","  # Process each result"
"0","  for (set_name in names(results_list)) {"
"0","    size <- as.numeric(gsub(""fam"", """", set_name))"
"0","    result <- results_list[[set_name]]"
"0","    "
"0","    # Process female penetrance"
"0","    female_curve <- calculate_penetrance_curves(result, ""female"")"
"0","    female_metrics <- calculate_penetrance_metrics("
"0","      true_penetrance = true_female_cumulative, "
"0","      estimated_penetrance = female_curve$Penetrance,"
"0","      sex = ""female"""
"0","    )"
"0","    "
"0","    # Process male penetrance"
"0","    male_curve <- calculate_penetrance_curves(result, ""male"")"
"0","    male_metrics <- calculate_penetrance_metrics("
"0","      true_penetrance = true_male_cumulative, "
"0","      estimated_penetrance = male_curve$Penetrance,"
"0","      sex = ""male"""
"0","    )"
"0","    "
"0","    # Add results to the table"
"0","    for (metrics in list(female_metrics, male_metrics)) {"
"0","      # Find metrics for specific ages"
"0","      age50_metrics <- metrics$key_age_metrics[metrics$key_age_metrics$Age == 50, ]"
"0","      age70_metrics <- metrics$key_age_metrics[metrics$key_age_metrics$Age == 70, ]"
"0","      "
"0","      evaluation_results <- rbind(evaluation_results, data.frame("
"0","        SampleSize = size,"
"0","        Sex = metrics$sex,"
"0","        MAE = metrics$mae,"
"0","        RMSE = metrics$rmse,"
"0","        AUC_True = metrics$auc_true,"
"0","        AUC_Estimated = metrics$auc_estimated,"
"0","        AUC_RelDiff = metrics$auc_rel_diff,"
"0","        Age50_True = ifelse(nrow(age50_metrics) > 0, age50_metrics$True, NA),"
"0","        Age50_Est = ifelse(nrow(age50_metrics) > 0, age50_metrics$Estimated, NA),"
"0","        Age50_Error = ifelse(nrow(age50_metrics) > 0, age50_metrics$AbsError, NA),"
"0","        Age70_True = ifelse(nrow(age70_metrics) > 0, age70_metrics$True, NA),"
"0","        Age70_Est = ifelse(nrow(age70_metrics) > 0, age70_metrics$Estimated, NA),"
"0","        Age70_Error = ifelse(nrow(age70_metrics) > 0, age70_metrics$AbsError, NA)"
"0","      ))"
"0","    }"
"0","  }"
"0","  "
"0","  # Sort by sex and sample size"
"0","  evaluation_results <- evaluation_results[order(evaluation_results$Sex, evaluation_results$SampleSize), ]"
"0","  "
"0","  return(evaluation_results)"
"0","}"
"0",""
"0","# Plot error metrics vs. sample size"
"0","plot_error_metrics <- function(evaluation_results) {"
"0","  # Reshape data for plotting"
"0","  plot_data <- tidyr::pivot_longer("
"0","    evaluation_results,"
"0","    cols = c(MAE, RMSE, AUC_RelDiff, Age50_Error, Age70_Error),"
"0","    names_to = ""Metric"","
"0","    values_to = ""Value"""
"0","  )"
"0","  "
"0","  # Create the plot"
"0","  ggplot(plot_data, aes(x = SampleSize, y = Value, color = Sex, shape = Metric)) +"
"0","    geom_point(size = 3) +"
"0","    geom_line(aes(group = interaction(Sex, Metric))) +"
"0","    facet_wrap(~ Metric, scales = ""free_y"") +"
"0","    scale_x_log10() +"
"0","    theme_minimal() +"
"0","    labs("
"0","      title = ""Error Metrics vs. Sample Size"","
"0","      subtitle = ""Log scale for sample size"","
"0","      x = ""Sample Size (log scale)"","
"0","      y = ""Error Value"""
"0","    ) +"
"0","    theme("
"0","      legend.position = ""bottom"","
"0","      plot.title = element_text(size = 16, face = ""bold""),"
"0","      axis.title = element_text(size = 14),"
"0","      strip.text = element_text(size = 12, face = ""bold"")"
"0","    )"
"0","}"
"0",""
"0","# Usage example:"
"0","# Load true penetrance values"
"0","true_female_cumulative <- cumsum(penetrance.mod.f)"
"0","true_male_cumulative <- cumsum(penetrance.mod.m)"
"0",""
"0","# Load results (if available)"
"0","if (file.exists(file.path(results_dir, ""all_penetrance_results.RData""))) {"
"0","  load(file.path(results_dir, ""all_penetrance_results.RData""))"
"0","  "
"0","  # Evaluate the results"
"0","  evaluation_results <- evaluate_all_results("
"0","    results_list, "
"0","    true_female_cumulative, "
"0","    true_male_cumulative"
"0","  )"
"0","  "
"0","  # Display evaluation table"
"0","  knitr::kable(evaluation_results, "
"0","              caption = ""Comparison of Estimated vs. True Penetrance"","
"0","              digits = 3)"
"0","  "
"0","  # Plot error metrics"
"0","  error_plot <- plot_error_metrics(evaluation_results)"
"0","  print(error_plot)"
"0","  "
"0","  # Save plot"
"0","  ggsave(""error_metrics_by_sample_size.png"", error_plot, width = 12, height = 8, dpi = 300)"
"0","  "
"0","  # Save evaluation results"
"0","  save(evaluation_results, file = file.path(results_dir, ""penetrance_evaluation_metrics.RData""))"
"0","} else {"
"0","  message(""Results file not found. Run penetrance estimation first."")"
"0","}"
"1","[1m[33mError[39m in `combine_vars()`:[22m
[38;5;252m[33m![38;5;252m Faceting variables must have at least one value.[39m
Backtrace:
[90m 1. [39m[1mbase[22m::print(error_plot)
[90m 2. [39mggplot2:::print.ggplot(error_plot)
[90m 4. [39mggplot2:::ggplot_build.ggplot(x)
[90m 5. [39mlayout$setup(data, plot$data, plot$plot_env)
[90m 6. [39mggplot2 (local) setup(..., self = self)
[90m 7. [39mself$facet$compute_layout(data, self$facet_params)
[90m 8. [39mggplot2 (local) compute_layout(..., self = self)
[90m 9. [39m[1m[94mggplot2::combine_vars([39m[22mdata, params$plot_env, vars, drop = params$drop[1m[94m)[39m[22m
"
