{"frames":[{"func":"try(simulateFamilies(numberFamilies = 10000, gene_freq = 0.1), \n    silent = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"simulateFamilies(numberFamilies = 10000, gene_freq = 0.1)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"suppressMessages(suppressWarnings(capture.output(for (i in 1:numberFamilies) {\n    cancers <- \"Colorectal\"\n    genes <- \"MLH1\"\n    nSibsPatern <- floor(rtruncnorm(n = 2, a = 0, b = 5, mean = 1,  ...","file":"","line_number":17,"end_line_number":51,"character_number":3,"end_character_number":5},{"func":"withCallingHandlers(expr, message = function(c) if (inherits(c, \n    classes)) tryInvokeRestart(\"muffleMessage\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"suppressWarnings(capture.output(for (i in 1:numberFamilies) {\n    cancers <- \"Colorectal\"\n    genes <- \"MLH1\"\n    nSibsPatern <- floor(rtruncnorm(n = 2, a = 0, b = 5, mean = 1,  ...","file":"","line_number":17,"end_line_number":51,"character_number":3,"end_character_number":5},{"func":"withCallingHandlers(expr, warning = function(w) if (inherits(w, \n    classes)) tryInvokeRestart(\"muffleWarning\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"capture.output(for (i in 1:numberFamilies) {\n    cancers <- \"Colorectal\"\n    genes <- \"MLH1\"\n    nSibsPatern <- floor(rtruncnorm(n = 2, a = 0, b = 5, mean = 1,  ...","file":"","line_number":17,"end_line_number":51,"character_number":3,"end_character_number":5},{"func":"withVisible(...elt(i))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild, db_sim, \n    genes, cancers, includeGeno = TRUE, includeBiomarkers = FALSE, \n    censoring = TRUE)","file":"","line_number":37,"end_line_number":42,"character_number":7,"end_character_number":7},{"func":"checkFam(dummy.fam, dummy.db)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".pedStructureCheck(ped, cancers = MS_cancers, proband = proband, \n    unknown.race = unknown.race, unknown.ancestry = unknown.ancestry, \n    ignore.proband.germ = ignore.proband.germ, allow.age.zero = allow.age.zero)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".checkHeredity(ped)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unique(ped[ped$MotherID != -999 | ped$FatherID != -999, c(\"ID\", \n    \"MotherID\", \"FatherID\")])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unique.data.frame(ped[ped$MotherID != -999 | ped$FatherID != \n    -999, c(\"ID\", \"MotherID\", \"FatherID\")])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"x[!duplicated(x, fromLast = fromLast, ...), , drop = FALSE]","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"`[.data.frame`(x, !duplicated(x, fromLast = fromLast, ...), , \n    drop = FALSE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(example_curves$Male_True, silent = TRUE) : \n  object 'example_curves' not found\n"}