"0","# Function to deeply clone a database"
"0","deep_clone <- function(x) {"
"0","  rapply(x, function(y) if(is.list(y)) return(deep_clone(y)) else return(y), how = ""replace"")"
"0","}"
"0",""
"0","# Main simulation function"
"0","simulateFamilies <- function(numberFamilies = 3000, gene_freq = 0.1) {"
"0","  # Initialize lists for families data"
"0","  families <- list()"
"0","  probandIDS <- c()"
"0","  probandGeneStatus <- c()"
"0","  probandAffectionStatus <- c()"
"0","  "
"0","  # Clone the original database to create a new simulation database"
"0","  db_sim <- deep_clone(PanelPRO::PanelPRODatabase)"
"0","  "
"0","  # Set up allele frequencies"
"0","  db_sim$AlleleFrequency[[""MLH1_anyPV"", 1]] <- gene_freq"
"0","  db_sim$AlleleFrequency[[""MLH1_anyPV"", 2]] <- gene_freq"
"0","  db_sim$AlleleFrequency[[""MLH1_anyPV"", 3]] <- gene_freq"
"0","  "
"0","  # Simulate families"
"0","  suppressMessages(suppressWarnings(capture.output("
"0","    for(i in 1:numberFamilies) {"
"0","      # Cancers"
"0","      cancers <- ""Colorectal"""
"0","      # Genes"
"0","      genes <- ""MLH1"""
"0","      #family members"
"0","      # Paternal aunts, paternal uncles"
"0","      nSibsPatern <- floor(rtruncnorm(n=2, a=0, b=5, mean=1, sd=3))"
"0","      # Maternal aunts, maternal uncles"
"0","      nSibsMatern <- floor(rtruncnorm(n=2, a=0, b=5, mean=1, sd=3))"
"0","      # Sisters and brothers"
"0","      nSibs <- floor(rtruncnorm(n=2, a=0, b=3, mean=1, sd=1))"
"0","      # We make the assumption that the number of sons and daughters for the"
"0","      # proband and all siblings, is the same. Nieces and nephews of the proband"
"0","      # are not sampled separately"
"0","      nGrandchild <- floor(rtruncnorm(n=2, a=0, b=3, mean=0, sd=1))"
"0","      nChild <- floor(rtruncnorm(n=2, a=0, b=3, mean=1, sd=1))"
"0","      "
"0","      # Simulate family using `PedUtils` code"
"0","      fam <- sim.runSimFam("
"0","        nSibsPatern, nSibsMatern, nSibs, nChild,"
"0","        db_sim, genes, cancers,"
"0","        includeGeno = TRUE, includeBiomarkers = FALSE, "
"0","        censoring = TRUE"
"0","      )"
"0","      "
"0","      famDF <- as.data.frame(fam)"
"0","      proband <- famDF %>% filter(isProband==1)"
"0","      probandIDS <- c(probandIDS, proband$ID)"
"0","      probandGeneStatus <- c(probandGeneStatus, proband$MLH1)"
"0","      probandAffectionStatus <- c(probandAffectionStatus, proband$isAffCOL)"
"0","      families[[i]] <- famDF"
"0","    }"
"0","  )))"
"0","  "
"0","  # Return the list of families and additional information"
"0","  return(list("
"0","    families = families,"
"0","    probandIDS = probandIDS,"
"0","    probandGeneStatus = probandGeneStatus,"
"0","    probandAffectionStatus = probandAffectionStatus"
"0","  ))"
"0","}"
"0",""
"0","# Process the simulation results"
"0","processSimulation <- function(sim_result) {"
"0","  # Extract families"
"0","  families <- sim_result$families"
"0","  "
"0","  # Filter families with affected probands"
"0","  carrierProbandfamilies <- Filter(function(fam) "
"0","    any(fam$isProband == 1 & fam$MLH1 == 1), families)"
"0","  "
"0","  # Hide genotype information for everyone but the proband"
"0","  simFamiliesGeno <- function(fams) {"
"0","    simFamilies <- list()"
"0","    for (i in 1:length(fams)) {"
"0","      family <- fams[[i]]"
"0","      proband <- family %>% filter(isProband==1)"
"0","      family$MLH1 <- ifelse(family$ID == proband$ID, family$MLH1, NA)"
"0","      simFamilies[[i]] <- family"
"0","    }"
"0","    return(simFamilies)"
"0","  }"
"0","  "
"0","  # Apply genotype masking"
"0","  masked_families <- simFamiliesGeno(carrierProbandfamilies)"
"0","  "
"0","  return(masked_families)"
"0","}"
"0",""
"0","# Function to get the default penetrance functions from PanelPRO"
"0","get_panelpro_penetrance <- function() {"
"0","  # Get the database"
"0","  db <- PanelPRO::PanelPRODatabase"
"0","  "
"0","  # Extract MLH1 penetrance for colorectal cancer"
"0","  # For females"
"0","  female_penetrance <- db$Penetrance["
"0","    which(attr(db$Penetrance, ""dimnames"")$Cancer == ""Colorectal""),"
"0","    which(attr(db$Penetrance, ""dimnames"")$Gene == ""MLH1_hetero_anyPV""),"
"0","    which(attr(db$Penetrance, ""dimnames"")$Race == ""All_Races""),"
"0","    which(attr(db$Penetrance, ""dimnames"")$Sex == ""Female""),"
"0","    ,"
"0","    which(attr(db$Penetrance, ""dimnames"")$PenetType == ""Net"")"
"0","  ]"
"0","  "
"0","  # For males"
"0","  male_penetrance <- db$Penetrance["
"0","    which(attr(db$Penetrance, ""dimnames"")$Cancer == ""Colorectal""),"
"0","    which(attr(db$Penetrance, ""dimnames"")$Gene == ""MLH1_hetero_anyPV""),"
"0","    which(attr(db$Penetrance, ""dimnames"")$Race == ""All_Races""),"
"0","    which(attr(db$Penetrance, ""dimnames"")$Sex == ""Male""),"
"0","    ,"
"0","    which(attr(db$Penetrance, ""dimnames"")$PenetType == ""Net"")"
"0","  ]"
"0","  "
"0","  # Return both"
"0","  return(list(female = female_penetrance, male = male_penetrance))"
"0","}"
"0",""
"0","# Function to filter families where the proband is a carrier"
"0","filterCarrierProbands <- function(fams) {"
"0","  carrier_families <- Filter(function(fam) "
"0","    any(fam$isProband == 1 & fam$MLH1 == 1), fams)"
"0","  return(carrier_families)"
"0","}"
"0",""
"0","# Function to reformat data for penetrance estimation"
"0","reformatFamilies <- function(fams) {"
"0","  # Create a copy to avoid modifying original data"
"0","  dat <- fams"
"0","  "
"0","  # Apply reformatting"
"0","  for (j in seq_along(dat)) {"
"0","    if (""ID"" %in% colnames(dat[[j]])) {"
"0","      colnames(dat[[j]])[colnames(dat[[j]]) == ""PedigreeID""] <- ""FamilyID"""
"0","    }"
"0","  }"
"0","  for (j in seq_along(dat)) {"
"0","    # Add a new column ""PedigreeID"" with the list number"
"0","    dat[[j]]$PedigreeID <- j"
"0","  }"
"0","  # Change ""isAffCOL"" to ""isAff"" if ""isAffCOL"" is a column"
"0","  for (j in seq_along(dat)) {"
"0","    if (""isAffCOL"" %in% colnames(dat[[j]])) {"
"0","      colnames(dat[[j]])[colnames(dat[[j]]) == ""isAffCOL""] <- ""isAff"""
"0","    }"
"0","  }"
"0","  for (j in seq_along(dat)) {"
"0","    if (""AgeCOL"" %in% colnames(dat[[j]])) {"
"0","      colnames(dat[[j]])[colnames(dat[[j]]) == ""AgeCOL""] <- ""Age"""
"0","    }"
"0","  }"
"0","  for (j in seq_along(dat)) {"
"0","    if (""MLH1"" %in% colnames(dat[[j]])) {"
"0","      colnames(dat[[j]])[colnames(dat[[j]]) == ""MLH1""] <- ""geno"""
"0","    }"
"0","  }"
"0","  "
"0","  return(dat)"
"0","}"
