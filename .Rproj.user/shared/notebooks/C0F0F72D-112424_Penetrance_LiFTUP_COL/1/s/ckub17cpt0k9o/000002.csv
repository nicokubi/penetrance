"0","process_pedigree_data <- function(dat) {"
"0","    ###########################################"
"0","    # USER CONFIGURATION - MODIFY AS NEEDED"
"0","    ###########################################"
"0","    "
"0","    # Age boundaries"
"0","    AGE_MIN <- 1    # Minimum valid age"
"0","    AGE_MAX <- 94   # Maximum valid age"
"0","    "
"0","    # Column name mapping - modify if your input data has different column names"
"0","    col_mapping <- c("
"0","        ""Pedigreename"" = ""PedigreeID"","
"0","        ""PedigreeIndividualID"" = ""ID"","
"0","        ""Gender"" = ""Sex"","
"0","        ""PedigreeMotherID"" = ""MotherID"","
"0","        ""PedigreeFatherID"" = ""FatherID"","
"0","        ""probandflag"" = ""isProband"","
"0","        ""Colorectal"" = ""isAff"",           # Change this for different cancer types"
"0","        ""Colorectal_AgeDx"" = ""Age"",       # Change this for different cancer types"
"0","        ""GT.Pos"" = ""geno"""
"0","    )"
"0","    "
"0","    ###########################################"
"0","    # HELPER FUNCTIONS - DO NOT MODIFY"
"0","    ###########################################"
"0","    "
"0","    constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {"
"0","        ifelse(age > max_age, max_age,"
"0","               ifelse(age < min_age, min_age, age))"
"0","    }"
"0","    "
"0","    stats <- list("
"0","        removed_sex = 0,"
"0","        invalid_age = 0,"
"0","        na_cur_age = 0"
"0","    )"
"0","    "
"0","    ###########################################"
"0","    # MAIN PROCESSING LOGIC"
"0","    ###########################################"
"0","    "
"0","    dat_processed <- lapply(dat, function(df) {"
"0","        # Rename columns"
"0","        for (old_name in names(col_mapping)) {"
"0","            if (old_name %in% colnames(df)) {"
"0","                colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]"
"0","            }"
"0","        }"
"0","        "
"0","        # Replace CurAge calculation "
"0","        df$CurAge <- ifelse(!is.na(df$ImputedMortAge), "
"0","                           df$ImputedMortAge,"
"0","                           df$WorkingCensorAge)"
"0","        "
"0","        # Keep the age constraints"
"0","        df$CurAge <- constrain_age(df$CurAge)"
"0","        "
"0","        # Process Sex"
"0","        initial_rows <- nrow(df)"
"0","        df$Sex <- ifelse(df$Sex == ""M"", 1, ifelse(df$Sex == ""F"", 0, NA))"
"0","        stats$removed_sex <<- stats$removed_sex + (initial_rows - nrow(df))"
"0","        "
"0","        # Process binary columns"
"0","        df$isProband <- ifelse(df$isProband == ""proband"", 1, 0)"
"0","        df$isAff[is.na(df$isAff)] <- 0"
"0","        df$isAff <- ifelse(df$isAff == ""True"", 1, 0)"
"0","        df$geno <- ifelse(df$geno == ""True"", 1,"
"0","                         ifelse(df$geno == ""False"", 0, NA))"
"0","        "
"0","        # Process ages"
"0","        df$CurAge <- constrain_age(df$CurAge)"
"0","        df$Age <- constrain_age(df$Age)"
"0","        "
"0","        # Update isAff based on Age"
"0","        df$isAff <- ifelse(!is.na(df$Age) & df$Age > 0, 1, df$isAff)"
"0","        "
"0","        # Validate parent IDs"
"0","        valid_ids <- df$ID"
"0","        df$FatherID <- ifelse(df$FatherID %in% valid_ids, df$FatherID, NA)"
"0","        df$MotherID <- ifelse(df$MotherID %in% valid_ids, df$MotherID, NA)"
"0","        "
"0","        # Handle invalid ages for affected individuals"
"0","        df$Age[df$isAff == 1 & (is.na(df$Age) | df$Age < AGE_MIN | df$Age > AGE_MAX)] <- NA"
"0","        "
"0","        # Count NA in CurAge"
"0","        stats$na_cur_age <<- stats$na_cur_age + sum(is.na(df$CurAge))"
"0","        "
"0","        # Check for duplicate IDs within this family"
"0","        duplicate_ids <- df$ID[duplicated(df$ID)]"
"0","        if (length(duplicate_ids) > 0) {"
"0","            warning(sprintf(""Family %s has duplicate IDs: %s"", "
"0","                          df$PedigreeID[1], "
"0","                          paste(duplicate_ids, collapse="", "")))"
"0","        }"
"0","        "
"0","        return(df)"
"0","    })"
"0","    "
"0","    # Add duplicate count to statistics"
"0","    stats$families_with_duplicates <- sum(sapply(dat_processed, function(df) {"
"0","        any(duplicated(df$ID))"
"0","    }))"
"0","    "
"0","    list("
"0","        processed_data = dat_processed,"
"0","        statistics = stats"
"0","    )"
"0","}"
"0",""
"0","# Usage"
"0","result <- process_pedigree_data(dat)"
"0","dat_adjusted <- result$processed_data"
"0",""
"0","# Print statistics"
"0","cat(sprintf(""Total individuals removed due to missing Sex: %d\n"", result$statistics$removed_sex))"
"1","Total individuals removed due to missing Sex: 0
"
"0","cat(sprintf(""Total NA values in CurAge: %d\n"", result$statistics$na_cur_age))"
"1","Total NA values in CurAge: 25008
"
"0","cat(sprintf(""Families with duplicate IDs: %d\n"", result$statistics$families_with_duplicates))"
"1","Families with duplicate IDs: 0
"
