"0","process_pedigree_data <- function(dat) {"
"0","    ###########################################"
"0","    # USER CONFIGURATION - MODIFY AS NEEDED"
"0","    ###########################################"
"0",""
"0","    # Age boundaries"
"0","    AGE_MIN <- 1 # Minimum valid age"
"0","    AGE_MAX <- 94 # Maximum valid age"
"0",""
"0","    # Current age calculation method"
"0","    calculate_cur_age <- function(year_birth, year_death, year_last_follow_up) {"
"0","        ifelse(!is.na(year_birth),"
"0","            ifelse(!is.na(year_death) | !is.na(year_last_follow_up),"
"0","                pmin(year_death, year_last_follow_up, na.rm = TRUE) - year_birth,"
"0","                NA"
"0","            ),"
"0","            NA"
"0","        )"
"0","    }"
"0",""
"0","    # Column name mapping - modify if your input data has different column names"
"0","    col_mapping <- c("
"0","        ""Pedigreename"" = ""PedigreeID"","
"0","        ""PedigreeIndividualID"" = ""ID"","
"0","        ""Gender"" = ""Sex"","
"0","        ""PedigreeMotherID"" = ""MotherID"","
"0","        ""PedigreeFatherID"" = ""FatherID"","
"0","        ""probandflag"" = ""isProband"","
"0","        ""Colorectal"" = ""isAff"", # Change this for different cancer types"
"0","        ""Colorectal_AgeDx"" = ""Age"", # Change this for different cancer types"
"0","        ""GT.Pos"" = ""geno"","
"0","        ""GT.Neg"" = ""geno_neg"""
"0","    )"
"0",""
"0","    ###########################################"
"0","    # HELPER FUNCTIONS - DO NOT MODIFY"
"0","    ###########################################"
"0",""
"0","    constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {"
"0","        ifelse(age > max_age, max_age,"
"0","            ifelse(age < min_age, min_age, age)"
"0","        )"
"0","    }"
"0",""
"0","    stats <- list("
"0","        removed_sex = 0,"
"0","        invalid_age = 0,"
"0","        na_cur_age = 0"
"0","    )"
"0",""
"0","    ###########################################"
"0","    # MAIN PROCESSING LOGIC"
"0","    ###########################################"
"0",""
"0","    dat_processed <- lapply(dat, function(df) {"
"0","        # Rename columns"
"0","        for (old_name in names(col_mapping)) {"
"0","            if (old_name %in% colnames(df)) {"
"0","                colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]"
"0","            }"
"0","        }"
"0",""
"0","        # Convert necessary columns to appropriate types"
"0","        df$WorkingBirthYear <- as.numeric(df$WorkingBirthYear)"
"0","        df$YEARDeath <- as.numeric(df$YEARDeath)"
"0","        df$WorkingCensorYear <- as.numeric(df$WorkingCensorYear)"
"0","        #df$YearLastFolUp <- df$WorkingCensorYear # Assuming 'YearLastFolUp' is 'WorkingCensorYear'"
"0",""
"0","        # Calculate CurAge"
"0","        df$CurAge <- calculate_cur_age(df$WorkingBirthYear, df$YEARDeath, df$WorkingCensorYear)"
"0","        df$CurAge <- ifelse(df$CurAge < 0, NA, df$CurAge)"
"0",""
"0","        # Process Sex"
"0","        initial_rows <- nrow(df)"
"0","        df$Sex <- ifelse(df$Sex == ""M"", 1, ifelse(df$Sex == ""F"", 0, NA))"
"0","        stats$removed_sex <<- stats$removed_sex + sum(is.na(df$Sex))"
"0","        df <- df[!is.na(df$Sex), ]"
"0",""
"0","        # Process binary columns"
"0","        df$isProband <- ifelse(df$isProband == ""proband"", 1, 0)"
"0","        df$isAff[is.na(df$isAff)] <- 0"
"0","        df$isAff <- ifelse(df$isAff == ""True"", 1, 0)"
"0","        df$geno <- ifelse(df$geno == ""True"", 1,"
"0","            ifelse(df$geno == ""False"", 0, NA)"
"0","        )"
"0","        df$geno_neg <- ifelse(df$geno_neg == ""True"", 1,"
"0","            ifelse(df$geno_neg == ""False"", 0, NA)"
"0","        )"
"0",""
"0","        # Create GT.Pos and GT.Neg"
"0","        df$GT.Pos <- df$geno == 1"
"0","        df$GT.Neg <- df$geno == 0"
"0",""
"0","        # Process ages"
"0","        df$CurAge <- constrain_age(df$CurAge)"
"0","        df$Age <- constrain_age(df$Age)"
"0",""
"0","        # Update isAff based on Age"
"0","        df$isAff <- ifelse(!is.na(df$Age) & df$Age > 0, 1, df$isAff)"
"0",""
"0","        # Validate parent IDs"
"0","        valid_ids <- df$ID"
"0","        df$FatherID <- ifelse(df$FatherID %in% valid_ids, df$FatherID, NA)"
"0","        df$MotherID <- ifelse(df$MotherID %in% valid_ids, df$MotherID, NA)"
"0",""
"0","        # Handle invalid ages for affected individuals"
"0","        df$Age[df$isAff == 1 & (is.na(df$Age) | df$Age < AGE_MIN | df$Age > AGE_MAX)] <- NA"
"0",""
"0","        # Count NA in CurAge"
"0","        stats$na_cur_age <<- stats$na_cur_age + sum(is.na(df$CurAge))"
"0",""
"0","        # Additional columns used in the new code"
"0","        # Ensure columns are numeric"
"0","        df$WorkingBirthYear <- as.numeric(df$WorkingBirthYear)"
"0","        df$YEARDeath <- as.numeric(df$YEARDeath)"
"0","        df$YearLastFolUp <- as.numeric(df$YearLastFolUp)"
"0",""
"0","        # Compute with_deathyear, without_deathyear, with_birthyear"
"0","        df$with_deathyear <- !is.na(df$YEARDeath)"
"0","        df$without_deathyear <- is.na(df$YEARDeath)"
"0","        df$with_birthyear <- !is.na(df$WorkingBirthYear)"
"0",""
"0","        # Calculate 'ImputedMortAge' where 'with_deathyear' & 'with_birthyear' is TRUE"
"0","        imputed_indices <- df$with_deathyear & df$with_birthyear"
"0","        df$ImputedMortAge <- NA # Initialize"
"0","        df$ImputedMortAge[imputed_indices] <- df$YEARDeath[imputed_indices] - df$WorkingBirthYear[imputed_indices]"
"0",""
"0","        # Print the number of existing ages of death"
"0","        num_existing <- sum(imputed_indices)"
"0","        cat(sprintf(""Using existing %d age of death\n"", num_existing))"
"0",""
"0","        # Status list"
"0","        status_list <- c(""GT.Pos"", ""GT.Neg"", ""Other"")"
"0",""
"0","        for (status in status_list) {"
"0","            if (status %in% c(""GT.Pos"", ""GT.Neg"")) {"
"0","                status_condition <- df[[status]] == TRUE"
"0","            } else {"
"0","                status_condition <- !(df$GT.Pos == TRUE | df$GT.Neg == TRUE)"
"0","            }"
"0",""
"0","            # age_death is 'YEARDeath' - 'WorkingBirthYear' for rows satisfying status_condition, dropping NA"
"0","            age_death_indices <- status_condition & !is.na(df$YEARDeath) & !is.na(df$WorkingBirthYear)"
"0","            age_death <- df$YEARDeath[age_death_indices] - df$WorkingBirthYear[age_death_indices]"
"0","            age_death <- age_death[!is.na(age_death)]"
"0",""
"0","            to_be_imputed <- df$without_deathyear & df$with_birthyear & status_condition"
"0",""
"0","            num_to_impute <- sum(to_be_imputed)"
"0",""
"0","            # Sample age_death with replacement"
"0","            if (length(age_death) > 0 && num_to_impute > 0) {"
"0","                imputed_ages <- sample(age_death, num_to_impute, replace = TRUE)"
"0","                df$ImputedMortAge[to_be_imputed] <- imputed_ages"
"0",""
"0","                # Check for exceed_2024 and below_lfu"
"0","                imputed_indices <- which(to_be_imputed)"
"0","                ImputedMortAge <- df$ImputedMortAge[imputed_indices]"
"0","                WorkingBirthYear <- df$WorkingBirthYear[imputed_indices]"
"0","                YearLastFolUp <- df$YearLastFolUp[imputed_indices]"
"0",""
"0","                exceed_2024 <- (ImputedMortAge + WorkingBirthYear) > 2024"
"0","                below_lfu <- (ImputedMortAge + WorkingBirthYear) < YearLastFolUp"
"0",""
"0","                # Set 'ImputedMortAge' to NA where 'exceed_2024' or 'below_lfu' is TRUE"
"0","                invalid_indices <- imputed_indices[exceed_2024 | below_lfu]"
"0","                df$ImputedMortAge[invalid_indices] <- NA"
"0",""
"0","                # Optionally, print info"
"0","                age_death_mean <- mean(age_death)"
"0","                imputed_age_death <- df$ImputedMortAge[to_be_imputed]"
"0","                imputed_age_death <- imputed_age_death[!is.na(imputed_age_death)]"
"0","                imputed_age_death_mean <- mean(imputed_age_death)"
"0","                cat(sprintf("
"0","                    ""Using %d age of death with mean %f to impute %d (succ %d) samples with status %s and ending mean %f\n"","
"0","                    length(age_death), age_death_mean, num_to_impute, length(imputed_age_death), status, imputed_age_death_mean"
"0","                ))"
"0","            }"
"0","        }"
"0",""
"0","        # Now, process the cancers"
"0","        # Assuming lfs_cancers is defined as a vector of cancer types"
"0","        # lfs_cancers <- c('Cancer1', 'Cancer2', ...) # Define this according to your data"
"0","        cancer_list <- c(lfs_cancers, ""LFS"", ""Colorectal"", ""Pancreatic"")"
"0",""
"0","        for (cancer in cancer_list) {"
"0","            # Define 'with_agedx' and 'without_agedx'"
"0","            cancer_column <- cancer"
"0","            agedx_column <- paste0(cancer, ""_AgeDx"")"
"0","            imputed_agedx_column <- paste0(cancer, ""_ImputedAgeDx"")"
"0",""
"0","            df[[imputed_agedx_column]] <- NA # Initialize"
"0",""
"0","            # Check if columns exist"
"0","            if (!(cancer_column %in% names(df)) || !(agedx_column %in% names(df))) {"
"0","                next # Skip if columns do not exist"
"0","            }"
"0",""
"0","            with_agedx <- df[[cancer_column]] == TRUE & !is.na(df[[agedx_column]])"
"0","            without_agedx <- df[[cancer_column]] == TRUE & is.na(df[[agedx_column]])"
"0","            AgeDx <- df[[agedx_column]][with_agedx]"
"0",""
"0","            # Assign existing AgeDx to ImputedAgeDx"
"0","            df[[imputed_agedx_column]][with_agedx] <- df[[agedx_column]][with_agedx]"
"0",""
"0","            for (status in status_list) {"
"0","                if (status %in% c(""GT.Pos"", ""GT.Neg"")) {"
"0","                    status_condition <- df[[status]] == TRUE"
"0","                } else {"
"0","                    status_condition <- !(df$GT.Pos == TRUE | df$GT.Neg == TRUE)"
"0","                }"
"0","                to_be_imputed <- without_agedx & status_condition"
"0","                num_to_impute <- sum(to_be_imputed)"
"0",""
"0","                if (length(AgeDx) > 0 && num_to_impute > 0) {"
"0","                    # Sample AgeDx with replacement"
"0","                    imputed_ages <- sample(AgeDx, num_to_impute, replace = TRUE)"
"0","                    # Assign the imputed ages"
"0","                    df[[imputed_agedx_column]][to_be_imputed] <- imputed_ages"
"0","                }"
"0","            }"
"0","        }"
"0",""
"0","        # Return the processed data frame"
"0","        return(df)"
"0","    })"
"0",""
"0","    list("
"0","        processed_data = dat_processed,"
"0","        statistics = stats"
"0","    )"
"0","}"
"0",""
"0","# Usage"
"0","result <- process_pedigree_data(dat)"
"1","Using existing 3 age of death
"
"2","Error in if (length(age_death) > 0 && num_to_impute > 0) { : 
  missing value where TRUE/FALSE needed
"
