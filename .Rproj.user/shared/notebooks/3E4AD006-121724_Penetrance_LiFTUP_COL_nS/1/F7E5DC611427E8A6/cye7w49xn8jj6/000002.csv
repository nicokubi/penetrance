"0","process_pedigree_data <- function(dat) {"
"0","    ###########################################"
"0","    # USER CONFIGURATION - MODIFY AS NEEDED"
"0","    ###########################################"
"0","    "
"0","    # Age boundaries"
"0","    AGE_MIN <- 1    # Minimum valid age"
"0","    AGE_MAX <- 94   # Maximum valid age"
"0","    "
"0","    # Column name mapping - modify if your input data has different column names"
"0","    col_mapping <- c("
"0","        ""Pedigreename"" = ""PedigreeID"","
"0","        ""PedigreeIndividualID"" = ""ID"","
"0","        ""Gender"" = ""Sex"","
"0","        ""PedigreeMotherID"" = ""MotherID"","
"0","        ""PedigreeFatherID"" = ""FatherID"","
"0","        ""probandflag"" = ""isProband"","
"0","        ""Colorectal"" = ""isAff"",           # Change this for different cancer types"
"0","        ""Colorectal_AgeDx"" = ""Age"",       # Change this for different cancer types"
"0","        ""GT.Pos"" = ""geno"""
"0","    )"
"0","    "
"0","    ###########################################"
"0","    # HELPER FUNCTIONS - DO NOT MODIFY"
"0","    ###########################################"
"0","    "
"0","    constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {"
"0","        ifelse(age > max_age, max_age,"
"0","               ifelse(age < min_age, min_age, age))"
"0","    }"
"0","    "
"0","    stats <- list("
"0","        removed_sex = 0,"
"0","        invalid_age = 0,"
"0","        na_cur_age = 0"
"0","    )"
"0","    "
"0","    ###########################################"
"0","    # MAIN PROCESSING LOGIC"
"0","    ###########################################"
"0","    "
"0","    dat_processed <- lapply(dat, function(df) {"
"0","        # Rename columns"
"0","        for (old_name in names(col_mapping)) {"
"0","            if (old_name %in% colnames(df)) {"
"0","                colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]"
"0","            }"
"0","        }"
"0","        "
"0","        # Replace CurAge calculation "
"0","        df$CurAge <- ifelse(!is.na(df$ImputedMortAge), "
"0","                           df$ImputedMortAge,"
"0","                           df$WorkingCensorAge)"
"0","        "
"0","        # Keep the age constraints"
"0","        df$CurAge <- constrain_age(df$CurAge)"
"0","        "
"0","        # Process Sex"
"0","        initial_rows <- nrow(df)"
"0","        df$Sex <- ifelse(df$Sex == ""M"", 1, ifelse(df$Sex == ""F"", 0, NA))"
"0","        stats$removed_sex <<- stats$removed_sex + (initial_rows - nrow(df))"
"0","        "
"0","        # Process binary columns"
"0","        df$isProband <- ifelse(df$isProband == ""proband"", 1, 0)"
"0","        df$isAff[is.na(df$isAff)] <- 0"
"0","        df$isAff <- ifelse(df$isAff == ""True"", 1, 0)"
"0","        df$geno <- ifelse(df$geno == ""True"", 1,"
"0","                         ifelse(df$geno == ""False"", 0, NA))"
"0","        "
"0","        # Process ages"
"0","        df$CurAge <- constrain_age(df$CurAge)"
"0","        df$Age <- constrain_age(df$Age)"
"0","        "
"0","        # Update isAff based on Age"
"0","        df$isAff <- ifelse(!is.na(df$Age) & df$Age > 0, 1, df$isAff)"
"0","        "
"0","        # Validate parent IDs"
"0","        valid_ids <- df$ID"
"0","        df$FatherID <- ifelse(df$FatherID %in% valid_ids, df$FatherID, NA)"
"0","        df$MotherID <- ifelse(df$MotherID %in% valid_ids, df$MotherID, NA)"
"0","        "
"0","        # Handle invalid ages for affected individuals"
"0","        df$Age[df$isAff == 1 & (is.na(df$Age) | df$Age < AGE_MIN | df$Age > AGE_MAX)] <- NA"
"0","        "
"0","        # Count NA in CurAge"
"0","        stats$na_cur_age <<- stats$na_cur_age + sum(is.na(df$CurAge))"
"0","        "
"0","        # Check for duplicate IDs within this family"
"0","        duplicate_ids <- df$ID[duplicated(df$ID)]"
"0","        if (length(duplicate_ids) > 0) {"
"0","            warning(sprintf(""Family %s has duplicate IDs: %s"", "
"0","                          df$PedigreeID[1], "
"0","                          paste(duplicate_ids, collapse="", "")))"
"0","        }"
"0","        "
"0","        return(df)"
"0","    })"
"0","    "
"0","    # Add duplicate count to statistics"
"0","    stats$families_with_duplicates <- sum(sapply(dat_processed, function(df) {"
"0","        any(duplicated(df$ID))"
"0","    }))"
"0","    "
"0","    list("
"0","        processed_data = dat_processed,"
"0","        statistics = stats"
"0","    )"
"0","}"
"0",""
"0","# Usage"
"0","result <- process_pedigree_data(dat)"
"0","dat_adjusted <- result$processed_data"
"0",""
"0","# Print statistics"
"0","cat(sprintf(""Total individuals removed due to missing Sex: %d\n"", result$statistics$removed_sex))"
"1","Total individuals removed due to missing Sex: 0
"
"0","cat(sprintf(""Total NA values in CurAge: %d\n"", result$statistics$na_cur_age))"
"1","Total NA values in CurAge: 25008
"
"0","cat(sprintf(""Families with duplicate IDs: %d\n"", result$statistics$families_with_duplicates))"
"1","Families with duplicate IDs: 0
"
"0","#describeFamilies(dat_adjusted)"
"0","# Analyze missing age information by relationship to proband"
"0",""
"0","# Function to determine relationship to proband"
"0","get_relationship_to_proband <- function(df, debug = FALSE) {"
"0","  proband_row <- which(df$isProband == 1)[1]"
"0","  if(is.na(proband_row)) return(rep(""Unknown"", nrow(df)))"
"0","  "
"0","  relationships <- rep(""Unclassified"", nrow(df))"
"0","  relationship_reasons <- rep("""", nrow(df))  # For debugging"
"0","  "
"0","  # First Degree"
"0","  relationships[df$FatherID == df$ID[proband_row]] <- ""1st Degree (Father)"""
"0","  relationships[df$MotherID == df$ID[proband_row]] <- ""1st Degree (Mother)"""
"0","  relationships[df$FatherID == df$FatherID[proband_row] & "
"0","               df$MotherID == df$MotherID[proband_row] &"
"0","               df$ID != df$ID[proband_row]] <- ""1st Degree (Sibling)"""
"0","  relationships[df$FatherID == df$ID[proband_row] | "
"0","               df$MotherID == df$ID[proband_row]] <- ""1st Degree (Child)"""
"0","  "
"0","  # Second Degree"
"0","  proband_father_id <- df$FatherID[proband_row]"
"0","  proband_mother_id <- df$MotherID[proband_row]"
"0","  "
"0","  # Grandparents"
"0","  if(!is.na(proband_father_id)) {"
"0","    relationships[df$FatherID == df$ID[df$ID == proband_father_id]] <- ""2nd Degree (Paternal Grandfather)"""
"0","    relationships[df$MotherID == df$ID[df$ID == proband_father_id]] <- ""2nd Degree (Paternal Grandmother)"""
"0","  }"
"0","  if(!is.na(proband_mother_id)) {"
"0","    relationships[df$FatherID == df$ID[df$ID == proband_mother_id]] <- ""2nd Degree (Maternal Grandfather)"""
"0","    relationships[df$MotherID == df$ID[df$ID == proband_mother_id]] <- ""2nd Degree (Maternal Grandmother)"""
"0","  }"
"0","  "
"0","  # Half-siblings"
"0","  relationships[df$FatherID == df$FatherID[proband_row] & "
"0","               df$MotherID != df$MotherID[proband_row] &"
"0","               df$ID != df$ID[proband_row]] <- ""2nd Degree (Paternal Half-Sibling)"""
"0","  relationships[df$MotherID == df$MotherID[proband_row] & "
"0","               df$FatherID != df$FatherID[proband_row] &"
"0","               df$ID != df$ID[proband_row]] <- ""2nd Degree (Maternal Half-Sibling)"""
"0","  "
"0","  # Aunts/Uncles"
"0","  if(!is.na(proband_father_id)) {"
"0","    relationships[df$FatherID == df$FatherID[df$ID == proband_father_id] & "
"0","                 df$MotherID == df$MotherID[df$ID == proband_father_id] &"
"0","                 df$ID != proband_father_id] <- ""2nd Degree (Paternal Aunt/Uncle)"""
"0","  }"
"0","  if(!is.na(proband_mother_id)) {"
"0","    relationships[df$FatherID == df$FatherID[df$ID == proband_mother_id] & "
"0","                 df$MotherID == df$MotherID[df$ID == proband_mother_id] &"
"0","                 df$ID != proband_mother_id] <- ""2nd Degree (Maternal Aunt/Uncle)"""
"0","  }"
"0","  "
"0","  # Nieces/Nephews"
"0","  sibling_ids <- df$ID[df$FatherID == df$FatherID[proband_row] & "
"0","                      df$MotherID == df$MotherID[proband_row] &"
"0","                      df$ID != df$ID[proband_row]]"
"0","  for(sib_id in sibling_ids) {"
"0","    relationships[df$FatherID == sib_id | df$MotherID == sib_id] <- ""2nd Degree (Niece/Nephew)"""
"0","  }"
"0","  "
"0","  # Third Degree"
"0","  # First cousins"
"0","  aunt_uncle_ids <- df$ID[grepl(""Aunt/Uncle"", relationships)]"
"0","  for(au_id in aunt_uncle_ids) {"
"0","    relationships[df$FatherID == au_id | df$MotherID == au_id] <- ""3rd Degree (First Cousin)"""
"0","  }"
"0","  "
"0","  # Great-grandparents"
"0","  if(!is.na(proband_father_id)) {"
"0","    father_parents <- df[df$ID == proband_father_id, c(""FatherID"", ""MotherID"")]"
"0","    relationships[df$ID %in% c(df$FatherID[df$ID == father_parents$FatherID],"
"0","                              df$MotherID[df$ID == father_parents$FatherID],"
"0","                              df$FatherID[df$ID == father_parents$MotherID],"
"0","                              df$MotherID[df$ID == father_parents$MotherID])] <- ""3rd Degree (Great-Grandparent)"""
"0","  }"
"0","  if(!is.na(proband_mother_id)) {"
"0","    mother_parents <- df[df$ID == proband_mother_id, c(""FatherID"", ""MotherID"")]"
"0","    relationships[df$ID %in% c(df$FatherID[df$ID == mother_parents$FatherID],"
"0","                              df$MotherID[df$ID == mother_parents$FatherID],"
"0","                              df$FatherID[df$ID == mother_parents$MotherID],"
"0","                              df$MotherID[df$ID == mother_parents$MotherID])] <- ""3rd Degree (Great-Grandparent)"""
"0","  }"
"0","  "
"0","  # Mark proband"
"0","  relationships[proband_row] <- ""Proband"""
"0","  "
"0","  # Classify any remaining relationships that weren't categorized above"
"0","  # Find indices of all relationships still marked as ""Unclassified"" "
"0","  unclassified <- which(relationships == ""Unclassified"")"
"0","  "
"0","  # Only proceed if there are unclassified relationships"
"0","  if(length(unclassified) > 0) {"
"0","    # Iterate through each unclassified relationship"
"0","    for(i in unclassified) {"
"0","      # Case 1: Individual has no parent information"
"0","      if(is.na(df$FatherID[i]) && is.na(df$MotherID[i])) {"
"0","        relationships[i] <- ""Other (No Parent Info)"""
"0","        relationship_reasons[i] <- ""Missing parent information"""
"0","      } "
"0","      # Case 2: Individual is a parent of someone in the pedigree, but not of the proband"
"0","      else if(df$ID[i] %in% df$FatherID || df$ID[i] %in% df$MotherID) {"
"0","        relationships[i] <- ""Other (Parent of Non-Proband)"""
"0","        relationship_reasons[i] <- ""Parent of someone other than proband"""
"0","      } "
"0","      # Case 3: Default case - relationship cannot be determined"
"0","      #The spouse of the proband's aunt/uncle (who is the cousin's parent but not "
"0","      #blood-related to the proband) would be classified as ""Parent of Non-Proband"""
"0","      else {"
"0","        relationships[i] <- ""Other (Distant/Unknown)"""
"0","        relationship_reasons[i] <- ""No clear relationship path to proband"""
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  if(debug) {"
"0","    return(data.frame("
"0","      ID = df$ID,"
"0","      Relationship = relationships,"
"0","      Reason = relationship_reasons"
"0","    ))"
"0","  }"
"0","  "
"0","  return(relationships)"
"0","}"
"0",""
"0","# Apply to each family and combine results"
"0","relationship_analysis <- do.call(rbind, lapply(dat_adjusted, function(df) {"
"0","  relationships <- get_relationship_to_proband(df)"
"0","  # Simplify relationships, but keep detail for ""Other"" categories"
"0","  simplified_relationships <- case_when("
"0","    relationships == ""Proband"" ~ ""Proband"","
"0","    grepl(""1st Degree"", relationships) ~ ""First Degree"","
"0","    grepl(""2nd Degree"", relationships) ~ ""Second Degree"","
"0","    grepl(""3rd Degree"", relationships) ~ ""Third Degree"","
"0","    grepl(""Other"", relationships) ~ relationships,  # Keep original ""Other"" categories"
"0","    TRUE ~ relationships  # Keep any remaining categories as is"
"0","  )"
"0","  data.frame("
"0","    Relationship = simplified_relationships,"
"0","    Missing_CurAge = is.na(df$CurAge),"
"0","    Missing_Age = is.na(df$Age) & df$isAff == 1"
"0","  )"
"0","}))"
"0",""
"0","# Calculate and print summary statistics"
"0","relationship_summary <- relationship_analysis %>%"
"0","  group_by(Relationship) %>%"
"0","  dplyr::summarise("
"0","    Total = n(),"
"0","    Affected = sum(Missing_Age == TRUE | Missing_Age == FALSE),"
"0","    Missing_CurAge_Count = sum(Missing_CurAge),"
"0","    Missing_Age_Count = sum(Missing_Age)"
"0","  ) %>%"
"0","  mutate("
"0","    Missing_CurAge_Pct = round(Missing_CurAge_Count / sum(Missing_CurAge_Count) * 100, 1),"
"0","    Missing_Age_Pct = round(Missing_Age_Count / sum(Missing_Age_Count) * 100, 1)"
"0","  ) %>%"
"0","  # Ensure a logical order for the relationships"
"0","  arrange(match(Relationship, c(""Proband"", ""First Degree"", ""Second Degree"", ""Third Degree"", ""Other"")))"
"0",""
"0","print(relationship_summary)"
