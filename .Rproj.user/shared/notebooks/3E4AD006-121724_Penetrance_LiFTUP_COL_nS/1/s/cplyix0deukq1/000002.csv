"0","process_pedigree_data <- function(dat) {"
"0","    browser()"
"0","    ###########################################"
"0","    # USER CONFIGURATION - MODIFY AS NEEDED"
"0","    ###########################################"
"0","    AGE_MIN <- 1"
"0","    AGE_MAX <- 94"
"0",""
"0","    calculate_cur_age <- function(year_birth, year_death, year_last_follow_up) {"
"0","        ifelse(!is.na(year_birth),"
"0","            ifelse(!is.na(year_death) | !is.na(year_last_follow_up),"
"0","                pmin(year_death, year_last_follow_up, na.rm = TRUE) - year_birth,"
"0","                NA"
"0","            ),"
"0","            NA"
"0","        )"
"0","    }"
"0",""
"0","    col_mapping <- c("
"0","        ""Pedigreename"" = ""PedigreeID"","
"0","        ""PedigreeIndividualID"" = ""ID"","
"0","        ""Gender"" = ""Sex"","
"0","        ""PedigreeMotherID"" = ""MotherID"","
"0","        ""PedigreeFatherID"" = ""FatherID"","
"0","        ""probandflag"" = ""isProband"","
"0","        ""Colorectal"" = ""isAff"","
"0","        ""Colorectal_AgeDx"" = ""Age"","
"0","        ""GT.Pos"" = ""geno"","
"0","        ""GT.Neg"" = ""geno_neg"""
"0","    )"
"0",""
"0","    constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {"
"0","        ifelse(age > max_age, max_age,"
"0","            ifelse(age < min_age, min_age, age)"
"0","        )"
"0","    }"
"0",""
"0","    stats <- list("
"0","        removed_sex = 0,"
"0","        invalid_age = 0,"
"0","        na_cur_age = 0"
"0","    )"
"0",""
"0","    ###########################################"
"0","    # COMBINE ALL FAMILIES"
"0","    ###########################################"
"0","    df <- do.call(rbind, dat)"
"0",""
"0","    ###########################################"
"0","    # MAIN PROCESSING LOGIC"
"0","    ###########################################"
"0","    "
"0","    # Rename columns"
"0","    for (old_name in names(col_mapping)) {"
"0","        if (old_name %in% colnames(df)) {"
"0","            colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]"
"0","        }"
"0","    }"
"0",""
"0","    # Convert necessary columns to appropriate types"
"0","    df$WorkingBirthYear <- as.numeric(df$WorkingBirthYear)"
"0","    df$YEARDeath <- as.numeric(df$YEARDeath)"
"0","    df$WorkingCensorYear <- as.numeric(df$WorkingCensorYear)"
"0","    df$YearLastFolUp <- as.numeric(df$YearLastFolUp)"
"0",""
"0","    # Calculate CurAge"
"0","    df$CurAge <- calculate_cur_age(df$WorkingBirthYear, df$YEARDeath, df$WorkingCensorYear)"
"0","    df$CurAge <- ifelse(df$CurAge < 0, NA, df$CurAge)"
"0",""
"0","    # Process Sex"
"0","    initial_rows <- nrow(df)"
"0","    df$Sex <- ifelse(df$Sex == ""M"", 1, ifelse(df$Sex == ""F"", 0, NA))"
"0","    stats$removed_sex <- sum(is.na(df$Sex))"
"0","    #df <- df[!is.na(df$Sex), ]"
"0",""
"0","    # Process binary columns"
"0","    df$isProband <- ifelse(df$isProband == ""proband"", 1, 0)"
"0","    df$isAff[is.na(df$isAff)] <- 0"
"0","    df$isAff <- ifelse(df$isAff == ""True"", 1, 0)"
"0","    df$geno <- ifelse(df$geno == ""True"", 1,"
"0","        ifelse(df$geno == ""False"", 0, NA)"
"0","    )"
"0","    df$geno_neg <- ifelse(df$geno_neg == ""True"", 1,"
"0","        ifelse(df$geno_neg == ""False"", 0, NA)"
"0","    )"
"0",""
"0","    # Create GT.Pos and GT.Neg"
"0","    df$GT.Pos <- df$geno == 1"
"0","    df$GT.Neg <- df$geno == 0"
"0",""
"0","    # Process ages"
"0","    df$CurAge <- constrain_age(df$CurAge)"
"0","    df$Age <- constrain_age(df$Age)"
"0",""
"0","    # Update isAff based on Age"
"0","    df$isAff <- ifelse(!is.na(df$Age) & df$Age > 0, 1, df$isAff)"
"0",""
"0","    # Validate parent IDs"
"0","    valid_ids <- df$ID"
"0","    df$FatherID <- ifelse(df$FatherID %in% valid_ids, df$FatherID, NA)"
"0","    df$MotherID <- ifelse(df$MotherID %in% valid_ids, df$MotherID, NA)"
"0",""
"0","    # Handle invalid ages for affected individuals"
"0","    df$Age[df$isAff == 1 & (is.na(df$Age) | df$Age < AGE_MIN | df$Age > AGE_MAX)] <- NA"
"0",""
"0","    # Count NA in CurAge"
"0","    stats$na_cur_age <- sum(is.na(df$CurAge))"
"0",""
"0","    # Compute mortality indicators"
"0","    df$with_deathyear <- !is.na(df$YEARDeath)"
"0","    df$without_deathyear <- is.na(df$YEARDeath)"
"0","    df$with_birthyear <- !is.na(df$WorkingBirthYear)"
"0",""
"0","    # Initialize ImputedMortAge"
"0","    df$ImputedMortAge <- NA"
"0",""
"0","    # Calculate existing mortality ages"
"0","    imputed_indices <- df$with_deathyear & df$with_birthyear"
"0","    df$ImputedMortAge[imputed_indices] <- df$YEARDeath[imputed_indices] - df$WorkingBirthYear[imputed_indices]"
"0",""
"0","    # Process mortality by status across ALL data"
"0","    status_list <- c(""GT.Pos"", ""GT.Neg"", ""Other"")"
"0","    "
"0","    for (status in status_list) {"
"0","        if (status %in% c(""GT.Pos"", ""GT.Neg"")) {"
"0","            status_condition <- !is.na(df[[status]]) & df[[status]] == TRUE"
"0","        } else {"
"0","            status_condition <- !is.na(df$GT.Pos) & !is.na(df$GT.Neg) & "
"0","                               !(df$GT.Pos == TRUE | df$GT.Neg == TRUE)"
"0","        }"
"0",""
"0","        age_death_indices <- status_condition & !is.na(df$YEARDeath) & !is.na(df$WorkingBirthYear)"
"0","        age_death <- df$YEARDeath[age_death_indices] - df$WorkingBirthYear[age_death_indices]"
"0","        age_death <- age_death[!is.na(age_death)]"
"0",""
"0","        to_be_imputed <- df$without_deathyear & df$with_birthyear & status_condition"
"0","        num_to_impute <- sum(to_be_imputed)"
"0",""
"0","        if (length(age_death) > 0 && num_to_impute > 0) {"
"0","            imputed_ages <- sample(age_death, num_to_impute, replace = TRUE)"
"0","            df$ImputedMortAge[to_be_imputed] <- imputed_ages"
"0",""
"0","            # Validate imputed ages"
"0","            imputed_indices <- which(to_be_imputed)"
"0","            exceed_2024 <- (df$ImputedMortAge[imputed_indices] + df$WorkingBirthYear[imputed_indices]) > 2024"
"0","            below_lfu <- (df$ImputedMortAge[imputed_indices] + df$WorkingBirthYear[imputed_indices]) < df$YearLastFolUp[imputed_indices]"
"0",""
"0","            invalid_indices <- imputed_indices[exceed_2024 | below_lfu]"
"0","            df$ImputedMortAge[invalid_indices] <- NA"
"0",""
"0","            # Print statistics"
"0","            cat(sprintf("
"0","                ""Status %s: Used %d ages (mean %.1f) to impute %d cases (successful: %d, mean %.1f)\n"","
"0","                status,"
"0","                length(age_death),"
"0","                mean(age_death),"
"0","                num_to_impute,"
"0","                sum(!is.na(df$ImputedMortAge[to_be_imputed])),"
"0","                mean(df$ImputedMortAge[to_be_imputed], na.rm = TRUE)"
"0","            ))"
"0","        }"
"0","    }"
"0",""
"0","    # Process cancers across ALL data"
"0","    cancer_list <- c(lfs_cancers, ""LFS"", ""Colorectal"", ""Pancreatic"")"
"0",""
"0","    for (cancer in cancer_list) {"
"0","        cancer_column <- cancer"
"0","        agedx_column <- paste0(cancer, ""_AgeDx"")"
"0","        imputed_agedx_column <- paste0(cancer, ""_ImputedAgeDx"")"
"0",""
"0","        df[[imputed_agedx_column]] <- NA"
"0",""
"0","        if (!(cancer_column %in% names(df)) || !(agedx_column %in% names(df))) {"
"0","            next"
"0","        }"
"0",""
"0","        with_agedx <- df[[cancer_column]] == TRUE & !is.na(df[[agedx_column]])"
"0","        without_agedx <- df[[cancer_column]] == TRUE & is.na(df[[agedx_column]])"
"0","        AgeDx <- df[[agedx_column]][with_agedx]"
"0",""
"0","        df[[imputed_agedx_column]][with_agedx] <- df[[agedx_column]][with_agedx]"
"0",""
"0","        for (status in status_list) {"
"0","            if (status %in% c(""GT.Pos"", ""GT.Neg"")) {"
"0","                status_condition <- !is.na(df[[status]]) & df[[status]] == TRUE"
"0","            } else {"
"0","                status_condition <- !is.na(df$GT.Pos) & !is.na(df$GT.Neg) & "
"0","                                   !(df$GT.Pos == TRUE | df$GT.Neg == TRUE)"
"0","            }"
"0","            "
"0","            to_be_imputed <- without_agedx & status_condition"
"0","            num_to_impute <- sum(to_be_imputed)"
"0",""
"0","            if (length(AgeDx) > 0 && num_to_impute > 0) {"
"0","                imputed_ages <- sample(AgeDx, num_to_impute, replace = TRUE)"
"0","                df[[imputed_agedx_column]][to_be_imputed] <- imputed_ages"
"0","                "
"0","                cat(sprintf("
"0","                    ""Cancer %s, Status %s: Used %d ages (mean %.1f) to impute %d cases (mean %.1f)\n"","
"0","                    cancer,"
"0","                    status,"
"0","                    length(AgeDx),"
"0","                    mean(AgeDx),"
"0","                    num_to_impute,"
"0","                    mean(df[[imputed_agedx_column]][to_be_imputed], na.rm = TRUE)"
"0","                ))"
"0","            }"
"0","        }"
"0","    }"
"0",""
"0","    # Split back into families"
"0","    dat_processed <- split(df, df$PedigreeID)"
"0",""
"0","    return(list("
"0","        processed_data = dat_processed,"
"0","        statistics = stats"
"0","    ))"
"0","}"
"0",""
"0","# Usage"
"0","result <- process_pedigree_data(dat)"
"1","Called from: "
"1","process_pedigree_data(dat)
"
"1","debug at #6: "
"1","AGE_MIN <- 1
"
"1","debug at #7: "
"1","AGE_MAX <- 94
"
"1","debug at #9: "
"1","calculate_cur_age <- function(year_birth, year_death, year_last_follow_up) {
"
"1","    ifelse(!is.na(year_birth), ifelse(!is.na(year_death) | !is.na(year_last_follow_up), 
"
"1","        pmin(year_death, year_last_follow_up, na.rm = TRUE) - 
"
"1","            year_birth, NA), NA)
"
"1","}
"
"1","debug at #19: "
"1","col_mapping <- c(Pedigreename = ""PedigreeID"", PedigreeIndividualID = ""ID"", 
"
"1","    Gender = ""Sex"", PedigreeMotherID = ""MotherID"", PedigreeFatherID = ""FatherID"", 
"
"1","    probandflag = ""isProband"", Colorectal = ""isAff"", Colorectal_AgeDx = ""Age"", 
"
"1","    GT.Pos = ""geno"", GT.Neg = ""geno_neg"")
"
"1","debug at #32: "
"1","constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {
"
"1","    ifelse(age > max_age, max_age, ifelse(age < min_age, min_age, 
"
"1","        age))
"
"1","}
"
"1","debug at #38: "
"1","stats <- list(removed_sex = 0, invalid_age = 0, na_cur_age = 0)
"
"1","debug at #47: "
"1","df <- do.call(rbind, dat)
"
"1","debug at #54: "
"1","for (old_name in names(col_mapping)) {
"
"1","    if (old_name %in% colnames(df)) {
"
"1","        colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]
"
"1","    }
"
"1","}
"
"0","df$WorkingCensorYear"
"1","   [1]"
"1"," 1998.000"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.000"
"1"," 1998.000"
"1"," 1998.000"
"1"," 1998.000"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.000"
"1"," 1998.556"
"1"," 1998.556"
"1","
"
"1","  [15]"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1996.000"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1","
"
"1","  [29]"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1","
"
"1","  [43]"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1966.000"
"1","
"
"1","  [57]"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1998.556"
"1"," 1997.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","
"
"1","  [71]"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2002.000"
"1"," 2012.000"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1","
"
"1","  [85]"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1","
"
"1","  [99]"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1","
"
"1"," [113]"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1"," 2001.750"
"1","
"
"1"," [127]"
"1"," 2001.750"
"1"," 2002.000"
"1"," 2002.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2000.000"
"1","
"
"1"," [141]"
"1"," 1999.000"
"1"," 1999.000"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1986.000"
"1"," 1999.000"
"1"," 1999.000"
"1"," 1999.000"
"1"," 1999.000"
"1"," 1994.600"
"1"," 1999.000"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1","
"
"1"," [155]"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1992.000"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1","
"
"1"," [169]"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1975.000"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1994.600"
"1"," 1952.000"
"1"," 1998.000"
"1"," 1999.000"
"1"," 1999.000"
"1"," 2000.000"
"1","       NA"
"1","
"
"1"," [183]"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 1998.000"
"1"," 1984.333"
"1"," 1956.000"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1","
"
"1"," [197]"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1","
"
"1"," [211]"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1984.333"
"1"," 1999.000"
"1","
"
"1"," [225]"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2013.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 1973.000"
"1","
"
"1"," [239]"
"1"," 1966.000"
"1"," 2001.000"
"1"," 2004.000"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 2004.000"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1","
"
"1"," [253]"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1980.000"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 1992.867"
"1"," 2004.000"
"1"," 2001.000"
"1"," 1965.000"
"1","
"
"1"," [267]"
"1"," 1992.000"
"1"," 1982.000"
"1"," 2003.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2007.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1","
"
"1"," [281]"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1","
"
"1"," [295]"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1","
"
"1"," [309]"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1","
"
"1"," [323]"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 1982.000"
"1"," 1996.833"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1","
"
"1"," [337]"
"1"," 2006.000"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 2006.000"
"1"," 1996.833"
"1"," 1996.833"
"1","
"
"1"," [351]"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 1996.833"
"1"," 2006.000"
"1"," 2005.000"
"1"," 1996.833"
"1"," 1951.000"
"1"," 1996.833"
"1"," 1975.000"
"1","       NA"
"1"," 2010.000"
"1"," 1980.000"
"1","
"
"1"," [365]"
"1"," 2002.000"
"1"," 2006.000"
"1"," 2016.000"
"1"," 2006.000"
"1"," 2017.000"
"1"," 2022.000"
"1"," 2006.000"
"1"," 1997.000"
"1"," 1983.000"
"1"," 2006.000"
"1"," 1967.000"
"1"," 1981.000"
"1"," 2020.000"
"1"," 2002.000"
"1","
"
"1"," [379]"
"1"," 1986.000"
"1"," 2006.000"
"1"," 1994.000"
"1"," 1977.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1","
"
"1"," [393]"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2011.000"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1","
"
"1"," [407]"
"1"," 2011.000"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2011.000"
"1"," 2011.000"
"1"," 2011.000"
"1"," 2000.688"
"1"," 2006.000"
"1"," 2000.688"
"1"," 2000.688"
"1","
"
"1"," [421]"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2006.000"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1","
"
"1"," [435]"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 1988.000"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1","
"
"1"," [449]"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2005.000"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1"," 2000.688"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","
"
"1"," [463]"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","
"
"1"," [477]"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2006.000"
"1"," 1967.000"
"1"," 1994.000"
"1"," 2006.000"
"1"," 2005.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 1998.000"
"1"," 2006.000"
"1","
"
"1"," [491]"
"1"," 2006.000"
"1"," 1967.000"
"1"," 2006.000"
"1"," 2006.000"
"1"," 1999.000"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2006.000"
"1"," 2000.952"
"1"," 2000.952"
"1","
"
"1"," [505]"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2006.000"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1","
"
"1"," [519]"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2006.000"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1","
"
"1"," [533]"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2006.000"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2006.000"
"1","
"
"1"," [547]"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1"," 2000.952"
"1","
"
"1"," [561]"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2013.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1","
"
"1"," [575]"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1","
"
"1"," [589]"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1"," 2008.000"
"1","
"
"1"," [603]"
"1"," 2008.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2005.000"
"1"," 1998.000"
"1"," 2005.000"
"1"," 1992.000"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2005.000"
"1"," 2005.000"
"1","
"
"1"," [617]"
"1"," 2003.286"
"1"," 2007.000"
"1"," 2005.000"
"1"," 2005.000"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2005.000"
"1"," 2003.286"
"1"," 2003.286"
"1","
"
"1"," [631]"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2001.000"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2005.000"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1","
"
"1"," [645]"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2010.000"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2005.000"
"1"," 2003.286"
"1","
"
"1"," [659]"
"1"," 2003.286"
"1"," 2003.286"
"1"," 2014.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1","
"
"1"," [673]"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1","
"
"1"," [687]"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1","
"
"1"," [701]"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2009.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","
"
"1"," [715]"
"1"," 2010.000"
"1"," 2009.000"
"1"," 2009.000"
"1"," 2002.000"
"1"," 2009.000"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2009.000"
"1"," 2004.538"
"1"," 2004.538"
"1","
"
"1"," [729]"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2009.000"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1","
"
"1"," [743]"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 2004.538"
"1"," 1994.000"
"1"," 2004.538"
"1"," 2006.000"
"1"," 2006.000"
"1"," 2009.000"
"1"," 1978.000"
"1"," 2009.000"
"1","       NA"
"1","       NA"
"1","
"
"1"," [757]"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2023.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2020.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2009.000"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1","
"
"1"," [771]"
"1"," 2018.000"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2019.000"
"1"," 2011.429"
"1"," 2011.429"
"1","
"
"1"," [785]"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2019.000"
"1"," 2011.429"
"1"," 2011.429"
"1"," 2018.000"
"1"," 1956.000"
"1"," 2008.000"
"1","
"
"1"," [799]"
"1"," 2000.000"
"1"," 2011.429"
"1","       NA"
"1"," 2009.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1","
"
"1"," [813]"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2007.000"
"1"," 2015.000"
"1"," 2015.000"
"1"," 2005.636"
"1"," 1979.000"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1","
"
"1"," [827]"
"1"," 1984.000"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 2005.636"
"1"," 1979.000"
"1"," 2015.000"
"1"," 2015.000"
"1","
"
"1"," [841]"
"1"," 2015.000"
"1"," 2014.000"
"1"," 2005.636"
"1"," 2015.000"
"1"," 2005.636"
"1"," 2015.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1","
"
"1"," [855]"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1","
"
"1"," [869]"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1"," 2002.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","       NA"
"1","
"
"1"," [883]"
"1","       NA"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1","
"
"1"," [897]"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1","       NA"
"1"," 2014.000"
"1","
"
"1"," [911]"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1","
"
"1"," [925]"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1","
"
"1"," [939]"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1","
"
"1"," [953]"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1"," 2014.000"
"1","       NA"
"1","       NA"
"1","       NA"
"1","
"
"1"," [967]"
"1","       NA"
"1","       NA"
"1","       NA"
"1"," 2012.000"
"1"," 2018.000"
"1"," 2001.000"
"1"," 1988.000"
"1"," 1949.000"
"1"," 1979.000"
"1"," 2012.000"
"1"," 2012.000"
"1"," 2012.000"
"1"," 2012.000"
"1"," 2012.000"
"1","
"
"1"," [981]"
"1"," 2013.000"
"1"," 1984.000"
"1"," 2011.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1","
"
"1"," [995]"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1"," 2019.000"
"1","
"
"1"," [ reached getOption(""max.print"") -- omitted 50831 entries ]
"
"0","c"
"1","Status GT.Pos: Used 538 ages (mean 39.9) to impute 2611 cases (successful: 702, mean 32.7)
"
"1","Status GT.Neg: Used 49 ages (mean 65.8) to impute 1083 cases (successful: 179, mean 50.1)
"
"2","Error in process_pedigree_data(dat) : object 'lfs_cancers' not found
"
