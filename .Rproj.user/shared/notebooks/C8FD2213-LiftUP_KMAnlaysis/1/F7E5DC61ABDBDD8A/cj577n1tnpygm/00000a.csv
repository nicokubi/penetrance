"0","# Function to convert columns to the required format"
"0","convert_pedigree_censor <- function(dat) {"
"0",""
"0","  # Loop through each pedigree in the list"
"0","  for (i in seq_along(dat)) {"
"0","    # Rename columns according to the required format"
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Pedigree.name""] <- ""PedigreeID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""UPN""] <- ""ID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Gender""] <- ""Sex"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Mother.ID""] <- ""MotherID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Father.ID""] <- ""FatherID"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""proband_flag_x""] <- ""isProband"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Age""] <- ""CurAge"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Colorectal""] <- ""isAff"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""Colorectal_age_dx""] <- ""Age"""
"0","    colnames(dat[[i]])[colnames(dat[[i]]) == ""GT.Pos""] <- ""geno"""
"0","    "
"0","      # Calculate CurAge only if it is currently NA"
"0","    dat[[i]]$CurAge <- ifelse(is.na(dat[[i]]$CurAge),"
"0","                              dat[[i]]$Year_Last_FolUp - dat[[i]]$Year_Birth,"
"0","                              dat[[i]]$CurAge)"
"0",""
"0","    # Step 1: Extract all columns that end with ""_age_dx"" (diagnosis age)"
"0","    diagnosis_age_columns <- grep(""_age_dx$"", names(dat[[i]]), value = TRUE)"
"0","    "
"0","    # Step 2: Calculate the earliest diagnosis age across all cancer types"
"0","    dat[[i]]$min_diagnosis_age <- apply(dat[[i]][diagnosis_age_columns], 1, function(x) {"
"0","      # Check if all values are NA in the diagnosis columns"
"0","      if (all(is.na(x))) {"
"0","        return(NA)  # Return NA if no diagnosis age is available"
"0","      } else {"
"0","        return(min(x, na.rm = TRUE))  # Return the minimum diagnosis age"
"0","      }"
"0","    })"
"0","    "
"0","    # Step 3: Update CurAge to censor at the first diagnosis or follow-up"
"0","    dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$min_diagnosis_age), "
"0","                              pmin(dat[[i]]$CurAge, dat[[i]]$min_diagnosis_age, na.rm = TRUE),"
"0","                              dat[[i]]$CurAge)"
"0",""
"0","  }"
"0","  "
"0","  # Return the modified data"
"0","  return(dat)"
"0","}"
"0",""
"0","# Example usage with your list of pedigrees"
"0","dat_adjusted <- convert_pedigree_censor(dat)"
"0",""
"0","# Iterate through each data frame in the list dat"
"0","for (i in seq_along(dat_adjusted)) {"
"0","  "
"0","   # Convert ""Sex"" to numeric where ""M"" is 1 and ""F"" is 0"
"0","  dat_adjusted[[i]]$Sex <- ifelse(dat_adjusted[[i]]$Sex == ""M"", 1, ifelse(dat_adjusted[[i]]$Sex == ""F"", 0, NA))"
"0","  "
"0","  # Remove rows where Sex is NA"
"0","  dat_adjusted[[i]] <- dat_adjusted[[i]][!is.na(dat_adjusted[[i]]$Sex), ]"
"0",""
"0","  # Convert ""isProband"" to numeric where ""proband"" is 1, and all other values are 0"
"0","  dat_adjusted[[i]]$isProband <- ifelse(dat_adjusted[[i]]$isProband == ""proband"", 1, 0)"
"0","  "
"0","  # Convert ""isAff"" to numeric where ""True"" is 1, and anything else (including NA) is 0"
"0","  dat_adjusted[[i]]$isAff[is.na(dat_adjusted[[i]]$isAff)] <- 0"
"0","  dat_adjusted[[i]]$isAff <- ifelse(dat_adjusted[[i]]$isAff == ""True"", 1, 0)"
"0","  "
"0","   #Adjust ""geno"" column: ""True"" = 1, ""False"" = 0, NA if unknown"
"0","  dat_adjusted[[i]]$geno <- ifelse(dat_adjusted[[i]]$geno == ""True"", 1,"
"0","                                   ifelse(dat_adjusted[[i]]$geno == ""False"", 0, NA))"
"0",""
"0","  # Ensure ""CurAge"" and ""Age"" are within allowed range (1 to 94)"
"0","  dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge > 94, 94, dat_adjusted[[i]]$CurAge)"
"0","  dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge < 1, 1, dat_adjusted[[i]]$CurAge)"
"0","  dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age > 94, 94, dat_adjusted[[i]]$Age)"
"0","  dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age < 1, 1, dat_adjusted[[i]]$Age)"
"0","  "
"0","  # Ensure dadid and momid are valid IDs"
"0","  valid_ids <- dat_adjusted[[i]]$ID"
"0","  "
"0","  dat_adjusted[[i]]$FatherID <- ifelse(dat_adjusted[[i]]$FatherID %in% valid_ids, dat_adjusted[[i]]$FatherID, NA)"
"0","  dat_adjusted[[i]]$MotherID <- ifelse(dat_adjusted[[i]]$MotherID %in% valid_ids, dat_adjusted[[i]]$MotherID, NA)"
"0","  "
"0","  # Check for any remaining invalid parent IDs and handle them"
"0","  if (any(is.na(dat_adjusted[[i]]$father) | is.na(dat_adjusted[[i]]$mother))) {"
"0","    warning(""Some individuals have invalid or missing father or mother IDs."")"
"0","  }"
"0","}"
"0",""
"0","# Initialize a counter for NA values"
"0","na_count <- 0"
"0",""
"0","# Loop through each data frame in the list"
"0","for(i in 1:length(dat_adjusted)) {"
"0","  # Add the count of NA values in the isAff column to na_count"
"0","  na_count <- na_count + sum(is.na(dat_adjusted[[i]]$CurAge))"
"0","}"
"0",""
"0","# Usage with or without removing probands"
"0","plot_penetrance_curves(dat_adjusted, remove_proband = TRUE)"
"2","Females - Affected: 151 , Non-Affected: 4953
"
"2","Males - Affected: 183 , Non-Affected: 4386
"
