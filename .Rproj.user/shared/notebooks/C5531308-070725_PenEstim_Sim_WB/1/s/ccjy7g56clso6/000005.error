{"frames":[{"func":"run_penetrance_estimation(sample_size, est_seed, n_iter, n_chains, \n    ncores = parallel::detectCores() - 1)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    penetrance(pedigree = reformatted_data, twins = NULL, n_chains = n_chains, \n        n_iter_per_chain = n_iter, ncores = ncores, baseline_data = baseline_data_default, \n        prev = prev, prior_params = prior_params_default, imp_interval = 10,  ...","file":"","line_number":34,"end_line_number":57,"character_number":3,"end_character_number":3},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"penetrance(pedigree = reformatted_data, twins = NULL, n_chains = n_chains, \n    n_iter_per_chain = n_iter, ncores = ncores, baseline_data = baseline_data_default, \n    prev = prev, prior_params = prior_params_default, imp_interval = 10, \n    burn_in = 0.1, median_max = TRUE, age_imputation = FALSE,  ...","file":"","line_number":37,"end_line_number":51,"character_number":7,"end_character_number":7},{"func":"parallel::parLapply(cl, 1:n_chains, function(i) {\n    mhChain(seed = seeds[i], n_iter = n_iter_per_chain, burn_in = burn_in, \n        chain_id = i, data = data, twins = twins, ncores = ncores, \n        prior_distributions = prop, max_age = max_age, prev = prev,  ...","file":"/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/R/penetranceMain.R","line_number":246,"end_line_number":267,"character_number":3,"end_character_number":4},{"func":"do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, \n    FUN = fun, ...), quote = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, \n    FUN = fun, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"staticClusterApply(cl, fun, length(x), argfun)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(cl[1:jobs], recvResult)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData.SOCKnode(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unserialize(node$con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(extract_posterior, silent = TRUE) : \n  object 'extract_posterior' not found\n"}