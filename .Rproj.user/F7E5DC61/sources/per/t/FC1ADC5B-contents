---
title: "Penetrance"
subtitle: "Application LiftUP Data - TP53 and Colorectal Cancer - ICE - Sex-specific - 031125"
format: 
  html:
    toc: true
    toc-location: body
date: 03-11-2025
theme: lightly
author:
  - name: "Nicolas Kubista"
    affiliations: "Harvard University"
embed-resources: true
toc: true
toc-expand: 2
toc-title: Contents
page-layout: full
code-fold: true
editor: visual
editor_options: 
  markdown: 
    wrap: 72
---

```{r, echo=FALSE, include=FALSE}
library(penetrance)
library(ggplot2)
library(ggridges)
library(ggplot2)
library(dplyr)
library(survival)
library(gridExtra)
library(GGally)


set.seed(2025)
```

# Descriptive Statistics

```{r fam4, echo=TRUE, cache=TRUE}
# Load data
dat_original <- read.csv("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/ICEoutput/imputed.csv")

# Assuming df is your dataframe and variable_name is your column name
value_counts <- table(dat_original$Colorectal)
print(value_counts)

family_list <- list()
unique_families <- unique(dat_original$familyid)

for (family_id in unique_families) {
    family_data <- dat_original[dat_original$familyid == family_id, ]
    family_list[[length(family_list) + 1]] <- family_data
}

dat <- family_list
```

```{r prep, echo=TRUE, cache=FALSE}
process_pedigree_data <- function(dat) {
    ###########################################
    # USER CONFIGURATION - MODIFY AS NEEDED
    ###########################################
    
    # Age boundaries
    AGE_MIN <- -100    # Minimum valid age
    AGE_MAX <- 200   # Maximum valid age
    
    # Column name mapping - modify if your input data has different column names
    col_mapping <- c(
        "familyid" = "PedigreeID",
        "globalid" = "ID",
        "NewSex" = "Sex",
        "NewMotherGlobalID" = "MotherID",
        "NewFatherGlobalID" = "FatherID",
        "probandflag" = "isProband",
        "Colorectal" = "isAff",           
        "Colorectal_ImputedAgeDx" = "Age",    # using imputed CRC age     
        "GT.Pos" = "geno"
    )
    
    ###########################################
    # HELPER FUNCTIONS - DO NOT MODIFY
    ###########################################
    
    constrain_age <- function(age, min_age = AGE_MIN, max_age = AGE_MAX) {
        if (is.numeric(age)) {
            return(ifelse(age > max_age, max_age,
                   ifelse(age < min_age, min_age, age)))
        }
        return(NA)
    }
    
    stats <- list(
        removed_sex = 0,
        invalid_age = 0,
        na_cur_age = 0,
        invalid_geno = 0
    )
    
    ###########################################
    # MAIN PROCESSING LOGIC
    ###########################################
    
    dat_processed <- lapply(dat, function(df) {
        # Rename columns
        for (old_name in names(col_mapping)) {
            if (old_name %in% colnames(df)) {
                colnames(df)[colnames(df) == old_name] <- col_mapping[old_name]
            }
        }
        
        # Process Sex more robustly
        df$Sex <- toupper(substr(as.character(df$Sex), 1, 1))  # Convert to first letter, uppercase
        df$Sex <- ifelse(df$Sex == "M", 1, 
                        ifelse(df$Sex == "F", 0, NA))
        
        # Process binary columns more robustly
        df$isProband <- ifelse(df$isProband == "proband", 1, 0)
        df$isAff <- ifelse(is.na(df$isAff), 0,
                          ifelse(df$isAff == "True", 1, 0))
        
        # Process genotype more robustly
        df$geno <- ifelse(df$geno == "True", 1,
                         ifelse(df$geno == "False", 0, NA))
        stats$invalid_geno <<- stats$invalid_geno + sum(is.na(df$geno))
        
        # Handle age processing
        df$CurAge <- df$WorkingCensorAge
        
        # Convert age columns to numeric and constrain
        df$CurAge <- as.numeric(df$CurAge)
        df$Age <- as.numeric(df$Age)
        df$CurAge <- constrain_age(df$CurAge)
        df$Age <- constrain_age(df$Age)
        
        # Update isAff based on Age
        df$isAff <- ifelse(!is.na(df$Age) & df$Age > 0, 1, df$isAff)
        
        # Validate parent IDs more strictly
        valid_ids <- unique(df$ID)
        df$FatherID <- ifelse(df$FatherID %in% valid_ids, df$FatherID, NA)
        df$MotherID <- ifelse(df$MotherID %in% valid_ids, df$MotherID, NA)
        
        # Additional validation: ensure fathers are male and mothers are female
        father_rows <- df$ID %in% df$FatherID
        mother_rows <- df$ID %in% df$MotherID
        if (any(father_rows)) {
            df$Sex[father_rows] <- 1  # Set fathers to male
        }
        if (any(mother_rows)) {
            df$Sex[mother_rows] <- 0  # Set mothers to female
        }
        
        # Update statistics
        stats$invalid_age <<- stats$invalid_age + sum(is.na(df$Age) & df$isAff == 1)
        stats$na_cur_age <<- stats$na_cur_age + sum(is.na(df$CurAge))
        
        return(df)
    })
    
    # Add more detailed statistics
    stats$total_individuals <- sum(sapply(dat_processed, nrow))
    stats$total_families <- length(dat_processed)
    stats$families_with_duplicates <- sum(sapply(dat_processed, function(df) {
        any(duplicated(df$ID))
    }))
    
    list(
        processed_data = dat_processed,
        statistics = stats
    )
}

# Usage
result <- process_pedigree_data(dat)
dat_adjusted <- result$processed_data
# Save the processed data
save(dat_adjusted, file="/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/ICE/processed_pedigree_data_COL_030425.RData")

# Print statistics
cat(sprintf("Total individuals removed due to missing Sex: %d\n", result$statistics$removed_sex))
cat(sprintf("Total NA values in CurAge: %d\n", result$statistics$na_cur_age))
cat(sprintf("Families with duplicate IDs: %d\n", result$statistics$families_with_duplicates))

```

# Basic Checks on the processed data

```{r checks, echo=TRUE, cache=FALSE}
# 1. Check for completeness and sample size
completeness_check <- function(dat_adjusted) {
  # Count individuals by sex and affected status
  sex_counts <- sapply(dat_adjusted, function(df) {
    c(
      male_carriers = sum(df$Sex == 1 & df$geno == 1, na.rm = TRUE),
      female_carriers = sum(df$Sex == 0 & df$geno == 1, na.rm = TRUE),
      male_affected = sum(df$Sex == 1 & df$isAff == 1, na.rm = TRUE),
      female_affected = sum(df$Sex == 0 & df$isAff == 1, na.rm = TRUE)
    )
  })
  
  # Total counts
  totals <- rowSums(sex_counts)
  print("Sample size by sex and status:")
  print(totals)
  
  # Check if sufficient data in each category
  if(any(totals < 30)) {
    warning("Small sample size in one or more categories")
  }
  
  return(totals)
}

# 2. Check for missing data in critical fields
missing_data_check <- function(dat_adjusted) {
  missing_counts <- sapply(dat_adjusted, function(df) {
    c(
      missing_sex = sum(is.na(df$Sex)),
      missing_geno = sum(is.na(df$geno)),
      missing_age = sum(is.na(df$Age) & df$isAff == 1),
      missing_curage = sum(is.na(df$CurAge) & df$isAff == 0)
    )
  })
  
  total_missing <- rowSums(missing_counts)
  print("Missing data counts:")
  print(total_missing)
  
  return(total_missing)
}

# 3. Age distribution check for affected individuals
age_distribution_check <- function(dat_adjusted) {
  # Extract ages of onset for affected individuals
  ages_male <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$Sex == 1]
  }))
  
  ages_female <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$Sex == 0]
  }))
  
  # Basic summary statistics
  male_summary <- summary(ages_male)
  female_summary <- summary(ages_female)
  
  print("Age of onset summary - Males:")
  print(male_summary)
  print("Age of onset summary - Females:")
  print(female_summary)
  
  # Check for implausible values
  if(min(ages_male, na.rm = TRUE) < 10 || min(ages_female, na.rm = TRUE) < 10) {
    warning("Very early onset detected - verify these cases")
  }
  
  return(list(male = male_summary, female = female_summary))
}

# 4. Check for ascertainment bias - CORRECTED VERSION
ascertainment_check <- function(dat_adjusted) {
  # Count probands and non-probands
  proband_counts <- sapply(dat_adjusted, function(df) {
    c(
      probands = sum(df$isProband == 1, na.rm = TRUE),
      non_probands = sum(df$isProband == 0, na.rm = TRUE)
    )
  })
  
  total_counts <- rowSums(proband_counts)
  proband_ratio <- total_counts["probands"] / sum(total_counts)
  
  print("Proband to non-proband ratio:")
  print(proband_ratio)
  
  # Compare age distribution in probands vs. non-probands
  ages_proband <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$isProband == 1 & df$geno == 1]
  }))
  
  ages_nonproband <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$isProband == 0 & df$geno == 1]
  }))
  
  # Use separate print statements
  cat("Mean age - Probands: ", mean(ages_proband, na.rm = TRUE), "\n")
  cat("Mean age - Non-probands: ", mean(ages_nonproband, na.rm = TRUE), "\n")
  
  return(abs(mean(ages_proband, na.rm = TRUE) - mean(ages_nonproband, na.rm = TRUE)))
}

# 5. Generate histograms for age distribution
age_histograms <- function(dat_adjusted) {
  # Extract data for different groups
  # 1. Proband carriers
  ages_proband_carriers <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$isProband == 1 & df$geno == 1]
  }))
  
  # 2. Proband non-carriers
  ages_proband_noncarriers <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$isProband == 1 & df$geno == 0]
  }))
  
  # 3. Non-proband carriers
  ages_nonproband_carriers <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$isProband == 0 & df$geno == 1]
  }))
  
  # 4. Non-proband non-carriers
  ages_nonproband_noncarriers <- unlist(lapply(dat_adjusted, function(df) {
    df$Age[df$isAff == 1 & df$isProband == 0 & df$geno == 0]
  }))
  
  # Set up a plotting area with 2 rows and 1 column
  par(mfrow = c(2, 1))
  
  # Define common bins for consistent comparison
  all_ages <- c(ages_proband_carriers, ages_proband_noncarriers, 
                ages_nonproband_carriers, ages_nonproband_noncarriers)
  age_range <- range(all_ages, na.rm = TRUE)
  bins <- seq(floor(age_range[1]), ceiling(age_range[2]), by = 2)  # 2-year bins
  
  # Plot 1: Histogram for probands (carriers vs non-carriers)
  hist_colors <- c("darkgreen", "lightgreen")
  
  # Create histograms with transparent fill
  hist(ages_proband_carriers, 
       breaks = bins,
       col = adjustcolor(hist_colors[1], alpha.f = 0.7),
       border = "darkgreen",
       main = "Age of Onset - Probands by Carrier Status",
       xlab = "Age", 
       ylab = "Frequency",
       xlim = age_range)
  
  # Add non-carriers histogram
  hist(ages_proband_noncarriers,
       breaks = bins,
       col = adjustcolor(hist_colors[2], alpha.f = 0.7),
       border = "darkgreen",
       add = TRUE)
  
  # Add legend
  legend("topright", 
         legend = c("Carriers", "Non-carriers"), 
         fill = hist_colors, 
         border = "darkgreen",
         bty = "n")
  
  # Plot 2: Histogram for non-probands (carriers vs non-carriers)
  hist_colors <- c("darkblue", "lightblue")
  
  # Create histograms with transparent fill
  hist(ages_nonproband_carriers, 
       breaks = bins,
       col = adjustcolor(hist_colors[1], alpha.f = 0.7),
       border = "darkblue",
       main = "Age of Onset - Non-Probands by Carrier Status",
       xlab = "Age", 
       ylab = "Frequency",
       xlim = age_range)
  
  # Add non-carriers histogram
  hist(ages_nonproband_noncarriers,
       breaks = bins,
       col = adjustcolor(hist_colors[2], alpha.f = 0.7),
       border = "darkblue",
       add = TRUE)
  
  # Add legend
  legend("topright", 
         legend = c("Carriers", "Non-carriers"), 
         fill = hist_colors, 
         border = "darkblue",
         bty = "n")
  
  # Reset plotting parameters
  par(mfrow = c(1, 1))
  
  # Return counts for each group
  return(list(
    proband_carriers = length(ages_proband_carriers),
    proband_noncarriers = length(ages_proband_noncarriers),
    nonproband_carriers = length(ages_nonproband_carriers),
    nonproband_noncarriers = length(ages_nonproband_noncarriers)
  ))
}

# Update the run_all_checks function to include histograms
run_all_checks <- function(dat_adjusted) {
  results <- list()
  
  cat("--------- COMPLETENESS CHECK ---------\n")
  results$completeness <- completeness_check(dat_adjusted)
  
  cat("\n--------- MISSING DATA CHECK ---------\n")
  results$missing <- missing_data_check(dat_adjusted)
  
  cat("\n--------- AGE DISTRIBUTION CHECK ---------\n")
  results$age_dist <- age_distribution_check(dat_adjusted)
  
  cat("\n--------- ASCERTAINMENT BIAS CHECK ---------\n")
  results$ascertainment <- ascertainment_check(dat_adjusted)
  
  cat("\n--------- GENERATING HISTOGRAMS ---------\n")
  results$histograms <- age_histograms(dat_adjusted)
  cat("Group counts:\n")
  print(results$histograms)
  
  return(results)
}

# Execute all checks including histograms
check_results <- run_all_checks(dat_adjusted)
```

```{r}

# Create a flattened dataframe for easier analysis
flat_data <- do.call(rbind, dat_adjusted)

# Create carrier status factor
#Create carrier status factor (including Unknown as Non-carrier)
# Create carrier status factor with three levels (including Untested for NA values)
flat_data$carrier_status <- factor(ifelse(is.na(flat_data$geno), 2, flat_data$geno),
                                  levels = c(0, 1, 2),
                                  labels = c("Non-carrier", "Carrier", "Untested"))


# Create affected status factor
flat_data$affected_status <- factor(ifelse(is.na(flat_data$isAff), 0, flat_data$isAff),
                                   levels = c(0, 1),
                                   labels = c("Unaffected", "Affected"))

# Create sex factor
flat_data$sex_label <- factor(flat_data$Sex,
                             levels = c(0, 1),
                             labels = c("Female", "Male"))

# Summary statistics by carrier status
cat("=== Summary Statistics for Age of Diagnosis by Carrier Status ===\n")
age_dx_summary <- flat_data %>%
  filter(!is.na(Age) & !is.na(carrier_status)) %>%
  group_by(carrier_status) %>%
  summarize(
    n = n(),
    mean_age = mean(Age, na.rm = TRUE),
    median_age = median(Age, na.rm = TRUE),
    sd_age = sd(Age, na.rm = TRUE),
    min_age = min(Age, na.rm = TRUE),
    max_age = max(Age, na.rm = TRUE),
    q25 = quantile(Age, 0.25, na.rm = TRUE),
    q75 = quantile(Age, 0.75, na.rm = TRUE)
  )
print(age_dx_summary)

cat("\n=== Summary Statistics for Current Age by Carrier Status ===\n")
current_age_summary <- flat_data %>%
  filter(!is.na(CurAge) & !is.na(carrier_status)) %>%
  group_by(carrier_status) %>%
  summarize(
    n = n(),
    mean_age = mean(CurAge, na.rm = TRUE),
    median_age = median(CurAge, na.rm = TRUE),
    sd_age = sd(CurAge, na.rm = TRUE),
    min_age = min(CurAge, na.rm = TRUE),
    max_age = max(CurAge, na.rm = TRUE),
    q25 = quantile(CurAge, 0.25, na.rm = TRUE),
    q75 = quantile(CurAge, 0.75, na.rm = TRUE)
  )
print(current_age_summary)

# Create visualizations
# 1. Age of Diagnosis Distribution by Carrier Status
p1 <- ggplot(flat_data %>% filter(!is.na(Age) & !is.na(carrier_status)),
            aes(x = Age, fill = carrier_status)) +
  geom_histogram(position = "dodge", binwidth = 5, alpha = 0.7, color = "black") +
  labs(title = "Age of Diagnosis Distribution by Carrier Status",
       x = "Age of Diagnosis", y = "Count") +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  theme(legend.position = "top")

# 2. Current Age Distribution by Carrier Status
p2 <- ggplot(flat_data %>% filter(!is.na(CurAge) & !is.na(carrier_status) & affected_status == "Unaffected"),
            aes(x = CurAge, fill = carrier_status)) +
  geom_histogram(position = "dodge", binwidth = 5, alpha = 0.7, color = "black") +
  labs(title = "Current Age Distribution by Carrier Status",
       x = "Current Age", y = "Count") +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  theme(legend.position = "top")


# 3. Density plots for Age of Diagnosis by Carrier Status and Sex
p3 <- ggplot(flat_data %>% filter(!is.na(Age) & !is.na(carrier_status) & !is.na(sex_label)),
            aes(x = Age, fill = carrier_status)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ sex_label) +
  labs(title = "Age of Diagnosis Density by Carrier Status and Sex",
       x = "Age of Diagnosis", y = "Density") +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  theme(legend.position = "top")

# 4. Boxplots for Age of Diagnosis by Carrier Status and Sex
p4 <- ggplot(flat_data %>% filter(!is.na(Age) & !is.na(carrier_status) & !is.na(sex_label)),
            aes(x = carrier_status, y = Age, fill = carrier_status)) +
  geom_boxplot(alpha = 0.7) +
  facet_wrap(~ sex_label) +
  labs(title = "Age of Diagnosis by Carrier Status and Sex",
       x = "Carrier Status", y = "Age of Diagnosis") +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  theme(legend.position = "none")

# 5. Ridgeline plot for Age of Diagnosis by Carrier Status and Sex
p5 <- ggplot(flat_data %>% filter(!is.na(Age) & !is.na(carrier_status) & !is.na(sex_label)),
            aes(x = Age, y = interaction(carrier_status, sex_label), fill = carrier_status)) +
  geom_density_ridges(alpha = 0.7, scale = 0.9) +
  labs(title = "Age of Diagnosis Distribution by Carrier Status and Sex",
       x = "Age of Diagnosis", y = "") +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  theme(legend.position = "none")

# 6. Affected vs Unaffected by Carrier Status
p6 <- ggplot(flat_data %>% filter(!is.na(carrier_status) & !is.na(affected_status)),
            aes(x = carrier_status, fill = affected_status)) +
  geom_bar(position = "dodge") +
  labs(title = "Affected Status by Carrier Status",
       x = "Carrier Status", y = "Count") +
  scale_fill_brewer(palette = "Set2") +
  theme_minimal() +
  theme(legend.position = "top")

# Arrange plots in a grid
# Display plots individually
print(p1)
print(p2)
print(p3)
print(p4)
print(p5)
print(p6)

# Additional analysis: Age of diagnosis statistics for affected individuals only
cat("\n=== Age of Diagnosis Statistics for Affected Individuals by Carrier Status ===\n")
affected_age_summary <- flat_data %>%
  filter(!is.na(Age) & !is.na(carrier_status) & affected_status == "Affected") %>%
  group_by(carrier_status, sex_label) %>%
  summarize(
    n = n(),
    mean_age = mean(Age, na.rm = TRUE),
    median_age = median(Age, na.rm = TRUE),
    sd_age = sd(Age, na.rm = TRUE),
    min_age = min(Age, na.rm = TRUE),
    max_age = max(Age, na.rm = TRUE),
    q25 = quantile(Age, 0.25, na.rm = TRUE),
    q75 = quantile(Age, 0.75, na.rm = TRUE)
  )
print(affected_age_summary)

# Create age groups
flat_data$age_group <- cut(flat_data$CurAge,
                          breaks = c(0, 20, 30, 40, 50, 60, 70, 80, 90),
                          labels = c("<20", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+"),
                          include.lowest = TRUE)

# Calculate prevalence by age group and carrier status
prevalence_data <- flat_data %>%
  filter(!is.na(age_group) & !is.na(carrier_status)) %>%
  group_by(age_group, carrier_status) %>%
  summarize(
    total = n(),
    affected = sum(affected_status == "Affected", na.rm = TRUE),
    prevalence = affected / total
  )

# Plot prevalence by age group and carrier status
ggplot(prevalence_data, aes(x = age_group, y = prevalence, fill = carrier_status, group = carrier_status)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.9), alpha = 0.7) +
  geom_text(aes(label = sprintf("%.1f%%", prevalence * 100)),
           position = position_dodge(width = 0.9),
           vjust = -0.5, size = 3) +
  labs(title = "Colorectal Cancer Prevalence by Age Group and Carrier Status",
       x = "Age Group", y = "Prevalence") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Create a table with counts
prevalence_table <- flat_data %>%
  filter(!is.na(age_group) & !is.na(carrier_status)) %>%
  group_by(age_group, carrier_status) %>%
  summarize(
    total_individuals = n(),
    affected_count = sum(affected_status == "Affected", na.rm = TRUE),
    prevalence_percent = sprintf("%.1f%%", (affected_count / total_individuals) * 100)
  )

# Print the table
knitr::kable(prevalence_table,
            caption = "Colorectal Cancer Prevalence by Age Group and Carrier Status",
            col.names = c("Age Group", "Carrier Status", "Total Individuals",
                         "Affected Count", "Prevalence (%)"))
```


# Estimation - without Probands, no Age Imputation

```{r est2, echo=TRUE, cache=FALSE}
# Exploring different priors
prior_params <- list(
  asymptote = list(g1 = 1, g2 = 1),
  threshold = list(min = 5, max = 40),
  median = list(m1 = 2, m2 = 2),
  first_quartile = list(q1 = 6, q2 = 3)
)
# Run Estimation procedure with default prior setting
system.time(out_liftup_Colorectal_ICE_031125 <- penetrance(
    pedigree = dat_adjusted, twins = NULL, n_chains = 1, n_iter_per_chain = 5000, ncores = 4,
    baseline_data = baseline_data_default, max_age = 90,
    prev = 0.0004380834,
    prior_params = prior_params, burn_in = 0.1, median_max = TRUE, thinning_factor = 1,
    age_imputation = FALSE, var = c(0.1, 0.1,2, 2, 5, 5,5,5), remove_proband = TRUE, sex_specific = TRUE
))
save(out_liftup_Colorectal_ICE_031125, file = "out_liftup_Colorectal_ICE_031125.RData")
```
